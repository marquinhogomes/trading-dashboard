#!/usr/bin/env python3
"""
Teste completo do mecanismo de aplica√ß√£o de par√¢metros din√¢micos
com verifica√ß√£o de regenera√ß√£o de tabelas
"""

import sys
import os
sys.path.append('.')

def testar_aplicacao_parametros_completa():
    """Teste completo do mecanismo"""
    
    print("üß™ TESTE COMPLETO: Aplica√ß√£o de Par√¢metros Din√¢micos")
    print("=" * 70)
    
    try:
        # Importa o sistema de par√¢metros din√¢micos
        from parametros_dinamicos import (
            verificar_parametros_alterados,
            obter_config_sistema_principal,
            aplicar_parametros_sistema,
            salvar_config_dashboard,
            verificar_regeneracao_tabelas,
            marcar_tabelas_regeneradas
        )
        
        print("‚úÖ Sistema de par√¢metros din√¢micos importado")
        
        # ETAPA 1: Simula altera√ß√£o no dashboard
        print("\n1Ô∏è‚É£ SIMULANDO ALTERA√á√ÉO NO DASHBOARD:")
        config_nova = {
            'valor_operacao': 25000,
            'limite_operacoes': 10,
            'max_posicoes': 10,
            'limite_lucro': 200,
            'r2_min': 0.7
        }
        
        resultado = salvar_config_dashboard(config_nova)
        print(f"   Salvamento: {'‚úÖ OK' if resultado else '‚ùå ERRO'}")
        
        # ETAPA 2: Verifica se foi detectado
        print("\n2Ô∏è‚É£ VERIFICANDO DETEC√á√ÉO DE ALTERA√á√ïES:")
        alterado = verificar_parametros_alterados()
        print(f"   Par√¢metros alterados: {'‚úÖ Sim' if alterado else '‚ùå N√£o'}")
        
        # ETAPA 3: Simula clique no bot√£o "Aplicar Par√¢metros Agora"
        if alterado:
            print("\n3Ô∏è‚É£ SIMULANDO CLIQUE NO BOT√ÉO 'APLICAR PAR√ÇMETROS AGORA':")
            
            # Carrega configura√ß√£o
            config_aplicar = obter_config_sistema_principal()
            print(f"   Configura√ß√£o carregada:")
            print(f"     ‚Ä¢ Valor opera√ß√£o: R$ {config_aplicar.get('valor_operacao', 0):,}")
            print(f"     ‚Ä¢ Limite opera√ß√µes: {config_aplicar.get('limite_operacoes', 0)}")
            print(f"     ‚Ä¢ R¬≤ m√≠nimo: {config_aplicar.get('r2_min', 0)}")
            
            # Aplica par√¢metros
            aplicar_parametros_sistema()
            print("   ‚úÖ Par√¢metros aplicados")
            
            # Verifica regenera√ß√£o de tabelas
            print("\n4Ô∏è‚É£ VERIFICANDO REGENERA√á√ÉO DE TABELAS:")
            regenerar = verificar_regeneracao_tabelas()
            print(f"   Tabelas precisam ser regeneradas: {'‚úÖ Sim' if regenerar else '‚ùå N√£o'}")
            
            if regenerar:
                print("   üîÑ Simulando regenera√ß√£o de tabelas...")
                marcar_tabelas_regeneradas()
                print("   ‚úÖ Tabelas marcadas como regeneradas")
                
                # Verifica se foi marcado corretamente
                regenerar_apos = verificar_regeneracao_tabelas()
                print(f"   Regenera√ß√£o pendente ap√≥s marca√ß√£o: {'‚ùå Ainda sim' if regenerar_apos else '‚úÖ N√£o'}")
        
        # ETAPA 5: Verifica estado final
        print("\n5Ô∏è‚É£ VERIFICANDO ESTADO FINAL:")
        alterado_final = verificar_parametros_alterados()
        print(f"   Par√¢metros alterados: {'‚ùå Ainda sim' if alterado_final else '‚úÖ N√£o'}")
        
        regenerar_final = verificar_regeneracao_tabelas()
        print(f"   Regenera√ß√£o pendente: {'‚ùå Ainda sim' if regenerar_final else '‚úÖ N√£o'}")
        
        # ETAPA 6: Teste com sistema integrado
        print("\n6Ô∏è‚É£ TESTE COM SISTEMA INTEGRADO:")
        try:
            from sistema_integrado import SistemaIntegrado
            
            # Cria inst√¢ncia do sistema
            sistema = SistemaIntegrado()
            print("   ‚úÖ Sistema integrado criado")
            
            # Simula nova altera√ß√£o
            config_teste = {
                'valor_operacao': 30000,
                'limite_operacoes': 12
            }
            salvar_config_dashboard(config_teste)
            print("   ‚úÖ Nova configura√ß√£o salva")
            
            # Aplica par√¢metros
            print("   üîÑ Aplicando par√¢metros no sistema integrado...")
            sistema.aplicar_parametros_dinamicos()
            print("   ‚úÖ Par√¢metros aplicados no sistema integrado")
            
            # Verifica valores
            print(f"   üìä Valores atuais no sistema:")
            print(f"     ‚Ä¢ Valor opera√ß√£o: R$ {sistema.valor_operacao:,}")
            print(f"     ‚Ä¢ Limite opera√ß√µes: {sistema.limite_operacoes}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao testar sistema integrado: {e}")
        
        print("\n" + "=" * 70)
        print("‚úÖ TESTE COMPLETO FINALIZADO COM SUCESSO!")
        print("üìä O mecanismo de aplica√ß√£o de par√¢metros est√° funcionando corretamente")
        print("üîÑ As tabelas ser√£o regeneradas quando necess√°rio")
        print("üí° Usu√°rio pode clicar 'Aplicar Par√¢metros Agora' para aplica√ß√£o imediata")
        
    except Exception as e:
        print(f"‚ùå ERRO no teste: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    testar_aplicacao_parametros_completa()
