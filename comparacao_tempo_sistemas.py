#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demonstra√ß√£o da diferen√ßa de tempo entre sistema original e otimizado
"""

import time
from datetime import datetime
import sys
import os

def teste_sistema_original():
    """Simula o comportamento do sistema original com aguardar_proximo_minuto"""
    print("üîÑ SISTEMA ORIGINAL - Com espera at√© pr√≥ximo minuto")
    print(f"In√≠cio: {datetime.now().strftime('%H:%M:%S')}")
    
    inicio = time.time()
    
    # Simula aguardar_proximo_minuto()
    print("‚è≥ Aguardando pr√≥ximo minuto...")
    while True:
        segundo_atual = datetime.now().second
        if segundo_atual == 0:
            break
        time.sleep(1)
    
    tempo_espera = time.time() - inicio
    print(f"‚úÖ Trading iniciou ap√≥s {tempo_espera:.2f} segundos")
    print(f"Fim: {datetime.now().strftime('%H:%M:%S')}")
    
    return tempo_espera

def teste_sistema_otimizado():
    """Simula o comportamento do sistema otimizado sem espera"""
    print("\nüöÄ SISTEMA OTIMIZADO - In√≠cio imediato")
    print(f"In√≠cio: {datetime.now().strftime('%H:%M:%S')}")
    
    inicio = time.time()
    
    # Sistema otimizado: in√≠cio imediato
    print("üöÄ Iniciando trading imediatamente, sem esperar pr√≥ximo minuto")
    time.sleep(0.1)  # Simula apenas o tempo de processamento
    
    tempo_inicio = time.time() - inicio
    print(f"‚úÖ Trading iniciou ap√≥s {tempo_inicio:.2f} segundos")
    print(f"Fim: {datetime.now().strftime('%H:%M:%S')}")
    
    return tempo_inicio

def main():
    print("=" * 60)
    print("COMPARA√á√ÉO: SISTEMA ORIGINAL vs OTIMIZADO")
    print("=" * 60)
    
    # Teste 1: Sistema original
    tempo_original = teste_sistema_original()
    
    # Pequena pausa
    time.sleep(2)
    
    # Teste 2: Sistema otimizado
    tempo_otimizado = teste_sistema_otimizado()
    
    # An√°lise
    print("\n" + "=" * 60)
    print("AN√ÅLISE COMPARATIVA")
    print("=" * 60)
    
    print(f"‚è∞ Sistema Original: {tempo_original:.2f} segundos")
    print(f"üöÄ Sistema Otimizado: {tempo_otimizado:.2f} segundos")
    
    economia = tempo_original - tempo_otimizado
    percentual = (economia / tempo_original) * 100 if tempo_original > 0 else 0
    
    print(f"\nüí∞ ECONOMIA DE TEMPO:")
    print(f"   ‚Ä¢ Redu√ß√£o: {economia:.2f} segundos")
    print(f"   ‚Ä¢ Percentual: {percentual:.1f}%")
    
    print(f"\nüìä CONCLUS√ïES:")
    if economia > 30:
        print(f"   ‚úÖ Otimiza√ß√£o SIGNIFICATIVA - Economia > 30s")
    elif economia > 10:
        print(f"   ‚úÖ Otimiza√ß√£o MODERADA - Economia > 10s")
    else:
        print(f"   ‚ö†Ô∏è Otimiza√ß√£o M√çNIMA - Economia < 10s")
    
    print(f"   ‚Ä¢ O sistema otimizado elimina a espera desnecess√°ria")
    print(f"   ‚Ä¢ Trading inicia imediatamente quando o sistema √© iniciado")
    print(f"   ‚Ä¢ Ideal para hor√°rios de preg√£o ativo")
    
    # Recomenda√ß√µes baseadas no hor√°rio atual
    now = datetime.now()
    if 8 <= now.hour < 17:  # Hor√°rio de preg√£o
        print(f"\nüéØ RECOMENDA√á√ÉO ATUAL:")
        print(f"   ‚Ä¢ Hor√°rio: {now.strftime('%H:%M')} (PREG√ÉO ATIVO)")
        print(f"   ‚Ä¢ Use o SISTEMA OTIMIZADO para in√≠cio imediato")
        print(f"   ‚Ä¢ Economia estimada: ~{economia:.0f} segundos")
    else:
        print(f"\nüéØ RECOMENDA√á√ÉO ATUAL:")
        print(f"   ‚Ä¢ Hor√°rio: {now.strftime('%H:%M')} (FORA DO PREG√ÉO)")
        print(f"   ‚Ä¢ Sistema hiberna at√© 08:00 independente da otimiza√ß√£o")
        print(f"   ‚Ä¢ Otimiza√ß√£o ser√° efetiva no pr√≥ximo preg√£o")

if __name__ == "__main__":
    main()
