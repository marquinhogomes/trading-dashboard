#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para verificar corre√ß√£o do gr√°fico de equity
Simula a situa√ß√£o onde h√° opera√ß√µes fechadas no MT5 mas o gr√°fico n√£o aparece
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta

def testar_coleta_equity():
    """Testa a coleta de dados de equity do MT5"""
    print("=" * 60)
    print("TESTE: COLETA DE DADOS DE EQUITY DO MT5")
    print("=" * 60)
    
    # Tenta conectar ao MT5
    print("1. Testando conex√£o com MT5...")
    if not mt5.initialize():
        print("‚ùå Falha ao inicializar MT5")
        return False
    
    print("‚úÖ MT5 conectado com sucesso")
    
    # Obt√©m informa√ß√µes da conta atual
    print("\n2. Verificando informa√ß√µes da conta...")
    account_info = mt5.account_info()
    if not account_info:
        print("‚ùå N√£o foi poss√≠vel obter informa√ß√µes da conta")
        return False
    
    print(f"‚úÖ Conta: {account_info.login}")
    print(f"   üìä Equity atual: R$ {account_info.equity:,.2f}")
    print(f"   üí∞ Balance atual: R$ {account_info.balance:,.2f}")
    print(f"   üìà Profit atual: R$ {account_info.profit:+,.2f}")
    
    # Verifica se h√° opera√ß√µes fechadas recentes
    print("\n3. Verificando opera√ß√µes fechadas recentes...")
    data_fim = datetime.now()
    data_inicio = data_fim - timedelta(days=7)  # √öltimos 7 dias
    
    deals = mt5.history_deals_get(data_inicio, data_fim)
    
    if not deals:
        print("‚ö†Ô∏è Nenhuma opera√ß√£o encontrada nos √∫ltimos 7 dias")
        print("üí° Isso pode explicar por que o gr√°fico n√£o aparece")
    else:
        print(f"‚úÖ {len(deals)} opera√ß√µes encontradas nos √∫ltimos 7 dias")
        
        # Mostra algumas opera√ß√µes
        deals_com_profit = [d for d in deals if hasattr(d, 'profit') and d.profit != 0]
        print(f"   üìä {len(deals_com_profit)} opera√ß√µes com lucro/preju√≠zo")
        
        if deals_com_profit:
            lucro_total = sum([d.profit for d in deals_com_profit])
            print(f"   üí∞ Lucro/preju√≠zo total: R$ {lucro_total:+,.2f}")
            
            print("\n   üîç √öltimas 5 opera√ß√µes:")
            for i, deal in enumerate(sorted(deals_com_profit, key=lambda x: x.time, reverse=True)[:5]):
                data_deal = datetime.fromtimestamp(deal.time)
                print(f"      {i+1}. {data_deal.strftime('%d/%m %H:%M')} - {deal.symbol} - R$ {deal.profit:+.2f}")
    
    # Testa cria√ß√£o de dados para o gr√°fico
    print("\n4. Simulando cria√ß√£o de dados para gr√°fico...")
    
    equity_historico = []
    
    # Ponto atual
    equity_historico.append({
        'timestamp': datetime.now(),
        'equity': account_info.equity,
        'balance': account_info.balance,
        'profit': account_info.profit
    })
    
    # Se h√° deals, reconstroi hist√≥rico simplificado
    if deals:
        deals_com_profit = [d for d in deals if hasattr(d, 'profit') and d.profit != 0]
        if deals_com_profit:
            lucro_total_deals = sum([d.profit for d in deals_com_profit])
            equity_inicial = account_info.equity - lucro_total_deals
            
            # Ponto inicial
            equity_historico.insert(0, {
                'timestamp': data_inicio,
                'equity': equity_inicial,
                'balance': account_info.balance - lucro_total_deals,
                'profit': 0.0
            })
            
            # Pontos intermedi√°rios (simplificado)
            lucro_acumulado = 0
            for deal in sorted(deals_com_profit, key=lambda x: x.time)[-3:]:  # √öltimos 3
                lucro_acumulado += deal.profit
                equity_historico.append({
                    'timestamp': datetime.fromtimestamp(deal.time),
                    'equity': equity_inicial + lucro_acumulado,
                    'balance': account_info.balance - lucro_total_deals + lucro_acumulado,
                    'profit': lucro_acumulado
                })
    
    print(f"‚úÖ Criados {len(equity_historico)} pontos para o gr√°fico")
    print("   üìä Pontos do gr√°fico:")
    for i, ponto in enumerate(equity_historico):
        print(f"      {i+1}. {ponto['timestamp'].strftime('%d/%m %H:%M')} - Equity: R$ {ponto['equity']:,.2f}")
    
    # Conclus√µes
    print("\n" + "=" * 60)
    print("CONCLUS√ïES DO TESTE")
    print("=" * 60)
    
    if len(equity_historico) >= 2:
        print("‚úÖ SUCESSO: Dados suficientes para criar o gr√°fico")
        print("üí° O gr√°fico deveria aparecer com estes dados")
        
        # Mostra varia√ß√£o
        equity_inicial = equity_historico[0]['equity']
        equity_final = equity_historico[-1]['equity']
        variacao = equity_final - equity_inicial
        variacao_pct = (variacao / equity_inicial * 100) if equity_inicial > 0 else 0
        
        print(f"üìà Varia√ß√£o de equity: R$ {variacao:+,.2f} ({variacao_pct:+.2f}%)")
        
    else:
        print("‚ö†Ô∏è PROBLEMA: Poucos dados para criar gr√°fico significativo")
        print("üí° Poss√≠veis solu√ß√µes:")
        print("   1. Aguardar mais opera√ß√µes")
        print("   2. Mostrar apenas valor atual")
        print("   3. Criar pontos sint√©ticos baseados no hist√≥rico")
    
    # Teste de detec√ß√£o do problema
    print(f"\nüîç DIAGN√ìSTICO DO PROBLEMA REPORTADO:")
    print(f"   ‚Ä¢ MT5 conectado: ‚úÖ")
    print(f"   ‚Ä¢ Equity atual dispon√≠vel: ‚úÖ R$ {account_info.equity:,.2f}")
    print(f"   ‚Ä¢ Opera√ß√µes nos √∫ltimos 7 dias: {'‚úÖ' if deals else '‚ùå'} {len(deals) if deals else 0}")
    print(f"   ‚Ä¢ Opera√ß√µes com P&L: {'‚úÖ' if deals_com_profit else '‚ùå'} {len(deals_com_profit) if 'deals_com_profit' in locals() else 0}")
    print(f"   ‚Ä¢ Pontos para gr√°fico: {'‚úÖ' if len(equity_historico) >= 2 else '‚ö†Ô∏è'} {len(equity_historico)}")
    
    if len(equity_historico) >= 2:
        print("\n‚úÖ RESULTADO: Com as corre√ß√µes, o gr√°fico DEVERIA aparecer")
    else:
        print("\n‚ö†Ô∏è RESULTADO: Pode ser necess√°rio aguardar mais dados ou usar valores atuais")
    
    mt5.shutdown()
    return True

if __name__ == "__main__":
    testar_coleta_equity()
