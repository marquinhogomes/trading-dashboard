#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para verificar o funcionamento do sistema integrado
e diagnosticar problemas com os bot√µes do dashboard.
"""

import sys
import os
import traceback
from datetime import datetime

def testar_sistema_integrado():
    """Testa a cria√ß√£o e funcionamento do sistema integrado"""
    print("="*60)
    print("DIAGN√ìSTICO DO SISTEMA INTEGRADO")
    print("="*60)
    
    # Teste 1: Importa√ß√£o do m√≥dulo
    try:
        print("\n1. Testando importa√ß√£o do sistema_integrado...")
        from sistema_integrado import SistemaIntegrado
        print("‚úÖ Importa√ß√£o bem-sucedida")
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    # Teste 2: Cria√ß√£o da inst√¢ncia
    try:
        print("\n2. Testando cria√ß√£o da inst√¢ncia...")
        sistema = SistemaIntegrado()
        print("‚úÖ Inst√¢ncia criada com sucesso")
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    # Teste 3: Verifica√ß√£o dos atributos essenciais
    try:
        print("\n3. Testando atributos essenciais...")
        
        # Verifica se os atributos necess√°rios existem
        atributos_necessarios = [
            'running', 'analysis_thread', 'analysis_thread_lock', 
            'analysis_thread_stop_event', 'logs', 'dados_sistema'
        ]
        
        for attr in atributos_necessarios:
            if not hasattr(sistema, attr):
                print(f"‚ùå Atributo '{attr}' n√£o encontrado")
                return False
            else:
                print(f"‚úÖ Atributo '{attr}' encontrado")
        
        print("‚úÖ Todos os atributos essenciais est√£o presentes")
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de atributos: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    # Teste 4: Verifica√ß√£o dos m√©todos de an√°lise
    try:
        print("\n4. Testando m√©todos de an√°lise...")
        
        # Verifica se os m√©todos necess√°rios existem
        metodos_necessarios = [
            'start_analysis_thread', 'stop_analysis_thread', 
            'is_analysis_running', 'log'
        ]
        
        for metodo in metodos_necessarios:
            if not hasattr(sistema, metodo):
                print(f"‚ùå M√©todo '{metodo}' n√£o encontrado")
                return False
            elif not callable(getattr(sistema, metodo)):
                print(f"‚ùå M√©todo '{metodo}' n√£o √© callable")
                return False
            else:
                print(f"‚úÖ M√©todo '{metodo}' encontrado e callable")
        
        print("‚úÖ Todos os m√©todos essenciais est√£o presentes")
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de m√©todos: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    # Teste 5: Teste de start/stop da an√°lise
    try:
        print("\n5. Testando start/stop da an√°lise...")
        
        # Verifica estado inicial
        print(f"Estado inicial da an√°lise: {sistema.is_analysis_running()}")
        
        # Tenta iniciar a an√°lise
        config_teste = {
            'zscore_min': 2.0,
            'zscore_max': 6.5,
            'max_posicoes': 5,
            'valor_operacao': 10000
        }
        
        print("Iniciando an√°lise...")
        resultado = sistema.start_analysis_thread(config=config_teste)
        print(f"Resultado do start_analysis_thread: {resultado}")
        
        # Aguarda um pouco
        import time
        time.sleep(1)
        
        # Verifica se est√° rodando
        is_running = sistema.is_analysis_running()
        print(f"Estado ap√≥s iniciar: {is_running}")
        
        if is_running:
            print("‚úÖ An√°lise iniciada com sucesso")
            
            # Tenta parar
            print("Parando an√°lise...")
            sistema.stop_analysis_thread()
            
            # Aguarda um pouco
            time.sleep(1)
            
            # Verifica se parou
            is_running_after_stop = sistema.is_analysis_running()
            print(f"Estado ap√≥s parar: {is_running_after_stop}")
            
            if not is_running_after_stop:
                print("‚úÖ An√°lise parada com sucesso")
            else:
                print("‚ö†Ô∏è An√°lise pode ainda estar rodando")
        else:
            print("‚ùå An√°lise n√£o iniciou corretamente")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de start/stop: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    # Teste 6: Verifica√ß√£o de logs
    try:
        print("\n6. Testando sistema de logs...")
        
        sistema.log("Teste de log do sistema integrado")
        
        if hasattr(sistema, 'logs') and len(sistema.logs) > 0:
            print("‚úÖ Sistema de logs funcionando")
            print(f"√öltimo log: {sistema.logs[-1]}")
        else:
            print("‚ùå Sistema de logs n√£o funcionando")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de logs: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    print("\n" + "="*60)
    print("DIAGN√ìSTICO CONCLU√çDO COM SUCESSO")
    print("="*60)
    
    return True

def testar_dashboard_integration():
    """Testa a integra√ß√£o com o dashboard"""
    print("\n" + "="*60)
    print("TESTANDO INTEGRA√á√ÉO COM O DASHBOARD")
    print("="*60)
    
    try:
        print("\n1. Testando cria√ß√£o da classe TradingSystemReal...")
        
        # Simula a cria√ß√£o como no dashboard
        sys.path.append('.')
        
        # Importa e cria a classe TradingSystemReal
        exec(open('dashboard_trading_pro_real.py').read(), globals())
        
        # Cria uma inst√¢ncia como no dashboard
        trading_system = TradingSystemReal()
        print("‚úÖ TradingSystemReal criada com sucesso")
        
        # Teste de cria√ß√£o do sistema integrado
        print("\n2. Testando cria√ß√£o do sistema integrado via dashboard...")
        
        if hasattr(trading_system, 'criar_sistema_integrado'):
            trading_system.criar_sistema_integrado()
            
            if hasattr(trading_system, 'sistema_integrado') and trading_system.sistema_integrado is not None:
                print("‚úÖ Sistema integrado criado via dashboard")
                
                # Testa os m√©todos como no dashboard
                print("\n3. Testando m√©todos como no dashboard...")
                
                # Simula o fluxo do bot√£o "Iniciar An√°lise"
                config_temp = {
                    'zscore_min': 2.0,
                    'zscore_max': 6.5,
                    'max_posicoes': 5,
                    'valor_operacao': 10000
                }
                
                # Tenta iniciar como no dashboard
                started = trading_system.sistema_integrado.start_analysis_thread(config=config_temp)
                print(f"Resultado do start_analysis_thread: {started}")
                
                # Verifica se est√° rodando
                import time
                time.sleep(1)
                
                analysis_running = trading_system.sistema_integrado.is_analysis_running()
                print(f"Estado da an√°lise: {analysis_running}")
                
                if analysis_running:
                    print("‚úÖ Fluxo do dashboard funcionando corretamente")
                    
                    # Para a an√°lise
                    trading_system.sistema_integrado.stop_analysis_thread()
                    time.sleep(1)
                    
                    analysis_running_after = trading_system.sistema_integrado.is_analysis_running()
                    print(f"Estado ap√≥s parar: {analysis_running_after}")
                    
                else:
                    print("‚ùå Fluxo do dashboard n√£o funcionando")
                    
            else:
                print("‚ùå Sistema integrado n√£o foi criado via dashboard")
                
        else:
            print("‚ùå M√©todo criar_sistema_integrado n√£o encontrado")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False
    
    return True

if __name__ == "__main__":
    print(f"Iniciando diagn√≥stico em {datetime.now()}")
    print(f"Python: {sys.version}")
    print(f"Diret√≥rio atual: {os.getcwd()}")
    
    # Executa os testes
    teste1_ok = testar_sistema_integrado()
    teste2_ok = testar_dashboard_integration()
    
    print("\n" + "="*60)
    print("RESUMO DOS TESTES")
    print("="*60)
    print(f"Teste do Sistema Integrado: {'‚úÖ PASSOU' if teste1_ok else '‚ùå FALHOU'}")
    print(f"Teste de Integra√ß√£o Dashboard: {'‚úÖ PASSOU' if teste2_ok else '‚ùå FALHOU'}")
    
    if teste1_ok and teste2_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("O problema pode estar na interface Streamlit ou na l√≥gica de rerun.")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!")
        print("Verifique os erros acima para identificar o problema.")
