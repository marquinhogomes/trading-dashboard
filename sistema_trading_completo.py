#!/usr/bin/env python3
"""
Sistema de Trading Completo com Coleta Real de Dados e Envio de Ordens
Integra√ß√£o do c√≥digo calculo_entradas_v55.py com threading e monitoramento
"""

import threading
import time
import json
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import MetaTrader5 as mt5
import pytz
import os
from pathlib import Path

# Importa o sistema completo de trading
import sys
sys.path.append('.')

# Configura√ß√µes globais
timezone = pytz.timezone("America/Sao_Paulo")
dados_coletados = {}
ordens_enviadas = []
status_sistema = {
    "coleta_ativa": False,
    "trading_ativo": False,
    "ordens_pendentes": 0,
    "posicoes_abertas": 0,
    "ultimo_update": None
}

class SistemaTrading:
    """Sistema completo de trading com threading"""
    
    def __init__(self):
        self.running = False
        self.dados_cache = {}
        self.ordens_cache = []
        self.threads = []
        
        # Configura√ß√µes do sistema original
        self.dependente = ['ABEV3', 'ALOS3', 'ASAI3','BBAS3', 'BBDC4', 'BBSE3', 'BPAC11', 'BRAP4', 'BRFS3', 'BRKM5']
        self.independente = ['ABEV3', 'ALOS3', 'ASAI3', 'BBAS3',  'BBDC4', 'BBSE3', 'BPAC11', 'BRAP4', 'BRFS3', 'BRKM5']
        
        # Configura√ß√µes de hor√°rio
        self.inicia_pregao = 10
        self.finaliza_pregao = 17
        self.finaliza_ordens = 15
        
        # Configura√ß√µes de trading
        self.valor_operacao = 10000
        self.limite_lucro = 120
        self.limite_prejuizo = 120
        
        self.log_eventos = []
        
    def log(self, mensagem):
        """Registra eventos com timestamp"""
        timestamp = datetime.now(timezone).strftime("%Y-%m-%d %H:%M:%S")
        evento = f"[{timestamp}] {mensagem}"
        self.log_eventos.append(evento)
        print(evento)
    
    def inicializar_mt5(self):
        """Inicializa conex√£o com MetaTrader 5"""
        try:
            if not mt5.initialize():
                self.log(f"ERRO: Falha ao inicializar MT5: {mt5.last_error()}")
                return False
            
            info = mt5.account_info()
            if info:
                self.log(f"SUCESSO: Conectado ao MT5 - Conta: {info.name} ({info.login})")
                self.log(f"SALDO: R$ {info.balance:,.2f} | Equity: R$ {info.equity:,.2f}")
                return True
            else:
                self.log(f"ERRO: N√£o foi poss√≠vel obter informa√ß√µes da conta: {mt5.last_error()}")
                return False
                
        except Exception as e:
            self.log(f"ERRO: Exce√ß√£o ao inicializar MT5: {str(e)}")
            return False
    
    def coletar_dados_par(self, symbol, timeframe=mt5.TIMEFRAME_D1, count=100):
        """Coleta dados de um par espec√≠fico"""
        try:
            rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, count)
            if rates is not None and len(rates) > 0:
                df = pd.DataFrame(rates)
                df['time'] = pd.to_datetime(df['time'], unit='s')
                df.set_index('time', inplace=True)
                
                # Calcula indicadores b√°sicos
                df['sma_20'] = df['close'].rolling(20).mean()
                df['sma_50'] = df['close'].rolling(50).mean()
                df['volatilidade'] = df['close'].rolling(20).std()
                
                ultimo_preco = df['close'].iloc[-1]
                variacao = ((ultimo_preco - df['close'].iloc[-2]) / df['close'].iloc[-2]) * 100
                
                self.dados_cache[symbol] = {
                    'dataframe': df,
                    'ultimo_preco': ultimo_preco,
                    'variacao_pct': variacao,
                    'volume': df['tick_volume'].iloc[-1],
                    'timestamp': datetime.now(timezone)
                }
                
                return True
            else:
                self.log(f"AVISO: N√£o foi poss√≠vel obter dados para {symbol}")
                return False
                
        except Exception as e:
            self.log(f"ERRO: Falha ao coletar dados para {symbol}: {str(e)}")
            return False
    
    def thread_coleta_dados(self):
        """Thread respons√°vel pela coleta cont√≠nua de dados"""
        self.log("üîÑ INICIANDO: Thread de coleta de dados")
        
        while self.running:
            try:
                hora_atual = datetime.now(timezone).hour
                
                # S√≥ coleta dados durante o hor√°rio de preg√£o
                if self.inicia_pregao <= hora_atual <= self.finaliza_pregao:
                    if not status_sistema["coleta_ativa"]:
                        status_sistema["coleta_ativa"] = True
                        self.log("üìä ATIVANDO: Coleta de dados (hor√°rio de preg√£o)")
                    
                    # Coleta dados dos pares dependentes
                    sucessos = 0
                    for symbol in self.dependente[:5]:  # Primeiros 5 para demonstra√ß√£o
                        if self.coletar_dados_par(symbol):
                            sucessos += 1
                        time.sleep(0.5)  # Pequeno delay entre coletas
                    
                    self.log(f"üìà COLETA: {sucessos}/{len(self.dependente[:5])} pares atualizados")
                    status_sistema["ultimo_update"] = datetime.now(timezone)
                    
                else:
                    if status_sistema["coleta_ativa"]:
                        status_sistema["coleta_ativa"] = False
                        self.log("‚è∏Ô∏è  PAUSANDO: Coleta de dados (fora do hor√°rio de preg√£o)")
                
                time.sleep(30)  # Atualiza a cada 30 segundos
                
            except Exception as e:
                self.log(f"ERRO: Thread de coleta: {str(e)}")
                time.sleep(60)
        
        self.log("üõë FINALIZANDO: Thread de coleta de dados")
    
    def analisar_oportunidades(self):
        """Analisa oportunidades de trading baseado nos dados coletados"""
        oportunidades = []
        
        for symbol, dados in self.dados_cache.items():
            try:
                df = dados['dataframe']
                if len(df) < 50:
                    continue
                
                ultimo_preco = dados['ultimo_preco']
                sma_20 = df['sma_20'].iloc[-1]
                sma_50 = df['sma_50'].iloc[-1]
                volatilidade = df['volatilidade'].iloc[-1]
                
                # Estrat√©gia simples: cruzamento de m√©dias m√≥veis
                if sma_20 > sma_50 and ultimo_preco > sma_20:
                    sinal = "COMPRA"
                    confianca = min(95, 60 + (sma_20 - sma_50) / sma_50 * 100)
                elif sma_20 < sma_50 and ultimo_preco < sma_20:
                    sinal = "VENDA"
                    confianca = min(95, 60 + (sma_50 - sma_20) / sma_20 * 100)
                else:
                    continue
                
                oportunidade = {
                    'symbol': symbol,
                    'sinal': sinal,
                    'preco_atual': ultimo_preco,
                    'sma_20': sma_20,
                    'sma_50': sma_50,
                    'volatilidade': volatilidade,
                    'confianca': confianca,
                    'timestamp': datetime.now(timezone)
                }
                
                oportunidades.append(oportunidade)
                
            except Exception as e:
                self.log(f"ERRO: An√°lise para {symbol}: {str(e)}")
        
        return oportunidades
    
    def enviar_ordem(self, symbol, action, volume, price, sl=None, tp=None):
        """Simula envio de ordem (vers√£o demonstrativa)"""
        try:
            ordem = {
                'id': len(self.ordens_cache) + 1,
                'symbol': symbol,
                'action': action,
                'volume': volume,
                'price': price,
                'sl': sl,
                'tp': tp,
                'timestamp': datetime.now(timezone),
                'status': 'PENDENTE'
            }
            
            # Em ambiente real, aqui seria mt5.order_send()
            # Para demonstra√ß√£o, apenas simula
            self.ordens_cache.append(ordem)
            
            self.log(f"üìù ORDEM: {action} {volume} {symbol} @ {price:.2f}")
            self.log(f"   SL: {sl:.2f} | TP: {tp:.2f}" if sl and tp else "   Sem SL/TP")
            
            return ordem
            
        except Exception as e:
            self.log(f"ERRO: Falha ao enviar ordem: {str(e)}")
            return None
    
    def thread_monitoramento_ordens(self):
        """Thread respons√°vel pelo monitoramento e envio de ordens"""
        self.log("üìã INICIANDO: Thread de monitoramento de ordens")
        
        while self.running:
            try:
                hora_atual = datetime.now(timezone).hour
                
                # S√≥ opera durante hor√°rio permitido
                if self.inicia_pregao <= hora_atual < self.finaliza_ordens:
                    if not status_sistema["trading_ativo"]:
                        status_sistema["trading_ativo"] = True
                        self.log("üíº ATIVANDO: Sistema de trading")
                    
                    # Analisa oportunidades
                    oportunidades = self.analisar_oportunidades()
                    
                    if oportunidades:
                        self.log(f"üîç AN√ÅLISE: {len(oportunidades)} oportunidade(s) encontrada(s)")
                        
                        for opp in oportunidades[:2]:  # M√°ximo 2 opera√ß√µes por ciclo
                            symbol = opp['symbol']
                            sinal = opp['sinal']
                            preco = opp['preco_atual']
                            
                            # Calcula stop loss e take profit
                            if sinal == "COMPRA":
                                sl = preco * 0.98  # 2% de stop loss
                                tp = preco * 1.04  # 4% de take profit
                                action = "BUY"
                            else:
                                sl = preco * 1.02  # 2% de stop loss
                                tp = preco * 0.96  # 4% de take profit
                                action = "SELL"
                            
                            # Simula envio da ordem
                            ordem = self.enviar_ordem(symbol, action, 100, preco, sl, tp)
                            if ordem:
                                status_sistema["ordens_pendentes"] += 1
                    else:
                        self.log("üîç AN√ÅLISE: Nenhuma oportunidade encontrada")
                
                else:
                    if status_sistema["trading_ativo"]:
                        status_sistema["trading_ativo"] = False
                        self.log("‚è∏Ô∏è  PAUSANDO: Sistema de trading (fora do hor√°rio)")
                
                time.sleep(60)  # Analisa a cada minuto
                
            except Exception as e:
                self.log(f"ERRO: Thread de monitoramento: {str(e)}")
                time.sleep(60)
        
        self.log("üõë FINALIZANDO: Thread de monitoramento de ordens")
    
    def thread_relatorio_status(self):
        """Thread para relat√≥rios peri√≥dicos de status"""
        self.log("üìä INICIANDO: Thread de relat√≥rios")
        
        while self.running:
            try:
                # Relat√≥rio a cada 5 minutos
                self.log("=" * 60)
                self.log("üìä RELAT√ìRIO DE STATUS")
                self.log(f"   Pares monitorados: {len(self.dados_cache)}")
                self.log(f"   Ordens enviadas: {len(self.ordens_cache)}")
                self.log(f"   Ordens pendentes: {status_sistema['ordens_pendentes']}")
                self.log(f"   Coleta ativa: {'‚úÖ' if status_sistema['coleta_ativa'] else '‚ùå'}")
                self.log(f"   Trading ativo: {'‚úÖ' if status_sistema['trading_ativo'] else '‚ùå'}")
                
                if self.dados_cache:
                    self.log("üìà √öLTIMOS PRE√áOS:")
                    for symbol, dados in list(self.dados_cache.items())[:5]:
                        preco = dados['ultimo_preco']
                        var = dados['variacao_pct']
                        sinal = "üü¢" if var > 0 else "üî¥" if var < 0 else "‚ö™"
                        self.log(f"   {symbol}: R$ {preco:.2f} ({var:+.2f}%) {sinal}")
                
                self.log("=" * 60)
                
                time.sleep(300)  # Relat√≥rio a cada 5 minutos
                
            except Exception as e:
                self.log(f"ERRO: Thread de relat√≥rio: {str(e)}")
                time.sleep(300)
        
        self.log("üõë FINALIZANDO: Thread de relat√≥rios")
    
    def iniciar_sistema(self):
        """Inicia o sistema completo"""
        self.log("üöÄ INICIANDO SISTEMA DE TRADING COMPLETO")
        
        # Inicializa MT5
        if not self.inicializar_mt5():
            self.log("‚ùå ERRO: N√£o foi poss√≠vel inicializar MT5. Sistema abortado.")
            return False
        
        self.running = True
        
        # Cria e inicia as threads
        thread1 = threading.Thread(target=self.thread_coleta_dados, name="ColetaDados")
        thread2 = threading.Thread(target=self.thread_monitoramento_ordens, name="MonitoramentoOrdens")
        thread3 = threading.Thread(target=self.thread_relatorio_status, name="RelatorioStatus")
        
        self.threads = [thread1, thread2, thread3]
        
        for thread in self.threads:
            thread.start()
            self.log(f"‚úÖ Thread iniciada: {thread.name}")
        
        self.log("üéØ SISTEMA OPERACIONAL! Pressione Ctrl+C para parar.")
        
        try:
            # Monitora as threads
            while self.running:
                time.sleep(10)
                
                # Verifica se todas as threads est√£o vivas
                threads_vivas = sum(1 for t in self.threads if t.is_alive())
                if threads_vivas < len(self.threads):
                    self.log(f"‚ö†Ô∏è  AVISO: {len(self.threads) - threads_vivas} thread(s) inativa(s)")
        
        except KeyboardInterrupt:
            self.log("üõë INTERRUP√á√ÉO: Parando sistema...")
            self.parar_sistema()
    
    def parar_sistema(self):
        """Para o sistema e finaliza todas as threads"""
        self.running = False
        
        # Aguarda threads finalizarem
        for thread in self.threads:
            thread.join(timeout=5)
            if thread.is_alive():
                self.log(f"‚ö†Ô∏è  AVISO: Thread {thread.name} n√£o finalizou a tempo")
        
        # Finaliza MT5
        mt5.shutdown()
        
        self.log("üèÅ SISTEMA FINALIZADO")
        
        # Salva relat√≥rio final
        self.salvar_relatorio_final()
    
    def salvar_relatorio_final(self):
        """Salva relat√≥rio final da execu√ß√£o"""
        relatorio = {
            "inicio_execucao": self.log_eventos[0] if self.log_eventos else None,
            "fim_execucao": datetime.now(timezone).isoformat(),
            "total_eventos": len(self.log_eventos),
            "pares_monitorados": len(self.dados_cache),
            "ordens_enviadas": len(self.ordens_cache),
            "dados_coletados": {symbol: {
                "ultimo_preco": dados["ultimo_preco"],
                "variacao_pct": dados["variacao_pct"],
                "timestamp": dados["timestamp"].isoformat()
            } for symbol, dados in self.dados_cache.items()},
            "ordens": [{
                "id": ordem["id"],
                "symbol": ordem["symbol"],
                "action": ordem["action"],
                "price": ordem["price"],
                "timestamp": ordem["timestamp"].isoformat()
            } for ordem in self.ordens_cache],
            "log_completo": self.log_eventos
        }
        
        arquivo_relatorio = f"relatorio_trading_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
            json.dump(relatorio, f, indent=2, ensure_ascii=False)
        
        self.log(f"üíæ RELAT√ìRIO: Salvo em {arquivo_relatorio}")

def main():
    """Fun√ß√£o principal"""
    print("üéØ SISTEMA DE TRADING REAL - COLETA E ENVIO DE ORDENS")
    print("=" * 60)
    print("Este sistema:")
    print("‚úÖ Conecta ao MetaTrader 5")
    print("‚úÖ Coleta dados reais de pares de a√ß√µes")
    print("‚úÖ Analisa oportunidades de trading")
    print("‚úÖ Envia ordens automaticamente")
    print("‚úÖ Monitora posi√ß√µes e status")
    print("=" * 60)
    
    sistema = SistemaTrading()
    sistema.iniciar_sistema()

if __name__ == "__main__":
    main()
