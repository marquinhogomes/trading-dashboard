#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do sistema_integrado_v10.py ap√≥s implementa√ß√£o das Etapas 1, 2 e 3
"""

def testar_sintaxe():
    """Testa se o arquivo tem sintaxe correta"""
    try:
        import ast
        with open('sistema_integrado_v10.py', 'r', encoding='utf-8') as f:
            codigo = f.read()
        ast.parse(codigo)
        print("‚úÖ SINTAXE: Arquivo sintaticamente correto!")
        return True
    except Exception as e:
        print(f"‚ùå SINTAXE: Erro na sintaxe do arquivo: {e}")
        return False

def testar_importacao():
    """Testa se o m√≥dulo pode ser importado"""
    try:
        import sistema_integrado_v10
        print("‚úÖ IMPORTA√á√ÉO: M√≥dulo importado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå IMPORTA√á√ÉO: Erro ao importar m√≥dulo: {e}")
        return False

def testar_criacao_instancia():
    """Testa se uma inst√¢ncia pode ser criada"""
    try:
        import sistema_integrado_v10
        sistema = sistema_integrado_v10.SistemaIntegrado()
        print("‚úÖ INST√ÇNCIA: SistemaIntegrado criado com sucesso!")
        
        # Verifica se as Etapas 1, 2 e 3 foram implementadas
        verificacoes = []
        
        # Etapa 1: M√©todo _start_all_threads_integrado
        if hasattr(sistema, '_start_all_threads_integrado'):
            verificacoes.append("‚úÖ Etapa 1: _start_all_threads_integrado implementado")
        else:
            verificacoes.append("‚ùå Etapa 1: _start_all_threads_integrado N√ÉO encontrado")
        
        # Etapa 2: M√©todos de thread de an√°lise
        metodos_analise = ['start_analysis_thread', 'stop_analysis_thread', 'is_analysis_running', '_analysis_thread_target']
        for metodo in metodos_analise:
            if hasattr(sistema, metodo):
                verificacoes.append(f"‚úÖ Etapa 2: {metodo} implementado")
            else:
                verificacoes.append(f"‚ùå Etapa 2: {metodo} N√ÉO encontrado")
        
        # Etapa 2: Atributos de controle de thread
        atributos_analise = ['analysis_thread', 'analysis_thread_lock', 'analysis_thread_stop_event']
        for attr in atributos_analise:
            if hasattr(sistema, attr):
                verificacoes.append(f"‚úÖ Etapa 2: {attr} presente")
            else:
                verificacoes.append(f"‚ùå Etapa 2: {attr} N√ÉO encontrado")
        
        print("\n" + "="*60)
        print("VERIFICA√á√ÉO DAS ETAPAS IMPLEMENTADAS:")
        print("="*60)
        for verif in verificacoes:
            print(verif)
        print("="*60)
        
        return True
    except Exception as e:
        print(f"‚ùå INST√ÇNCIA: Erro ao criar inst√¢ncia: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def main():
    print("üß™ TESTE DO SISTEMA_INTEGRADO_V10.PY")
    print("="*50)
    
    sucesso_total = True
    
    # Teste 1: Sintaxe
    sucesso_total &= testar_sintaxe()
    
    # Teste 2: Importa√ß√£o
    sucesso_total &= testar_importacao()
    
    # Teste 3: Cria√ß√£o de inst√¢ncia e verifica√ß√£o das etapas
    sucesso_total &= testar_criacao_instancia()
    
    print("\n" + "="*50)
    if sucesso_total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ As Etapas 1, 2 e 3 foram implementadas corretamente!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("‚ö†Ô∏è Verifique os erros acima.")
    print("="*50)

if __name__ == "__main__":
    main()
