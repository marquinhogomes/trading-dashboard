#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard Trading Profissional - Opera√ß√µes Reais MT5
Sistema completo de monitoramento e controle de trading com base em calculo_entradas_v55.py
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import MetaTrader5 as mt5
import pytz
from datetime import datetime, timedelta, time
import json
import os
import threading
import time as time_module
import io
import random
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

# Imports do sistema original
import sys
sys.path.append('.')

# Import do sistema integrado para threading otimizado
try:
    from sistema_integrado import SistemaIntegrado
    SISTEMA_INTEGRADO_DISPONIVEL = True
except ImportError:
    SISTEMA_INTEGRADO_DISPONIVEL = False
    print("‚ö†Ô∏è Sistema integrado n√£o dispon√≠vel - operando em modo b√°sico")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Trading Dashboard Pro - MT5 Real",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para interface profissional
st.markdown("""
<style>
    /* Remove barras brancas e espa√ßos desnecess√°rios */
    .block-container {
        padding-top: 1rem;
        padding-bottom: 0rem;
        padding-left: 1rem;
        padding-right: 1rem;
        max-width: none;
    }
    
    /* Remove espa√ßamentos extras da sidebar */
    .css-1d391kg {
        padding-top: 1rem;
    }
    
    /* Remove espa√ßos em branco acima e abaixo */
    .main .block-container {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }
    
    .main-header {
        background: linear-gradient(90deg, #1f4e79 0%, #2980b9 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        color: white;
        text-align: center;
    }
    
    .status-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #2980b9;
        margin: 0.5rem 0;
    }
    
    .metric-positive { color: #27ae60; font-weight: bold; }
    .metric-negative { color: #e74c3c; font-weight: bold; }
    .metric-neutral { color: #34495e; font-weight: bold; }
    
    .trade-table {
        font-size: 0.85rem;
        background: white;
        border-radius: 8px;
        padding: 1rem;
    }
    
    .log-container {
        background: #2c3e50;
        color: #ecf0f1;
        padding: 1rem;
        border-radius: 8px;
        height: 300px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 0.8rem;
    }
      /* Bot√µes de status MT5 customizados */
    .status-button-connected {
        background-color: #27ae60 !important;
        color: white !important;
        border: 2px solid #27ae60 !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        width: 100% !important;
        height: 38px !important;
        min-height: 38px !important;
        max-height: 38px !important;
        text-align: center !important;
        font-weight: bold !important;
        cursor: default !important;
        box-sizing: border-box !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 0.875rem !important;
        line-height: 1.2 !important;
    }
    
    .status-button-disconnected {
        background-color: #e74c3c !important;
        color: white !important;
        border: 2px solid #e74c3c !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        width: 100% !important;
        height: 38px !important;
        min-height: 38px !important;
        max-height: 38px !important;
        text-align: center !important;
        font-weight: bold !important;
        cursor: default !important;
        box-sizing: border-box !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 0.875rem !important;
        line-height: 1.2 !important;
    }
    
    /* Bot√µes de status do Sistema */
    .system-status-running {
        background-color: #28a745 !important;
        color: white !important;
        border: 2px solid #28a745 !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        width: 100% !important;
        height: 38px !important;
        min-height: 38px !important;
        max-height: 38px !important;
        text-align: center !important;
        font-weight: bold !important;
        cursor: default !important;
        box-sizing: border-box !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 0.875rem !important;
        line-height: 1.2 !important;
    }
      .system-status-stopped {
        background-color: #e74c3c !important;
        color: white !important;
        border: 2px solid #e74c3c !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        width: 100% !important;
        height: 38px !important;
        min-height: 38px !important;
        max-height: 38px !important;
        text-align: center !important;
        font-weight: bold !important;
        cursor: default !important;
        box-sizing: border-box !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 0.875rem !important;
        line-height: 1.2 !important;
    }
    
    .sidebar-section {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border: 1px solid #dee2e6;
    }
    
    /* For√ßa bot√µes do Streamlit a terem o mesmo tamanho */
    .stButton > button {
        height: 38px !important;
        min-height: 38px !important;
        max-height: 38px !important;
        box-sizing: border-box !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        font-size: 0.875rem !important;
        line-height: 1.2 !important;
        padding: 0.5rem 1rem !important;
    }
      /* Garante que as colunas tenham o mesmo tamanho */
    .element-container {
        width: 100% !important;
    }
    
    /* Estiliza√ß√£o personalizada das abas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background-color: transparent;
        padding: 0;
    }
      .stTabs [data-baseweb="tab"] {
        background-color: #6c757d !important;
        border: 2px solid #495057 !important;
        border-radius: 8px !important;
        color: white !important;
        font-weight: 600 !important;
        padding: 12px 20px !important;
        margin: 0 4px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    }
      .stTabs [data-baseweb="tab"]:hover {
        background-color: #5a6268 !important;
        border-color: #343a40 !important;
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
    }    .stTabs [aria-selected="true"] {
        background-color: #495057 !important;
        border-color: #343a40 !important;
        color: white !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
    }
</style>
""", unsafe_allow_html=True)

class TradingSystemReal:
    """Sistema de Trading Real com MT5 - Otimizado com Threading Avan√ßado"""
    
    def __init__(self):
        self.mt5_connected = False
        self.running = False
        
        # Inicializar estruturas de dados primeiro
        self.dados_sistema = {
            "execucoes": 0,
            "pares_processados": 0,
            "ordens_enviadas": 0,
            "posicoes_abertas": 0,
            "lucro_diario": 0.0,
            "equity_atual": 0.0,
            "saldo_inicial": 0.0,
            "drawdown_max": 0.0,
            "win_rate": 0.0,
            "sharpe_ratio": 0.0,
            "ultimo_update": None
        }
        self.logs = []
        self.trade_history = []
        self.posicoes_abertas = []
        self.sinais_ativos = []
        self.equity_historico = []
        
        # Integra√ß√£o com sistema avan√ßado de threading
        if SISTEMA_INTEGRADO_DISPONIVEL:
            self.sistema_integrado = SistemaIntegrado()
            self.modo_otimizado = True
            self.log("‚úÖ Sistema integrado carregado - Modo threading avan√ßado ativado")
        else:
            self.sistema_integrado = None
            self.modo_otimizado = False
            self.log("‚ö†Ô∏è Sistema b√°sico - Threading avan√ßado n√£o dispon√≠vel")
        
        # Configura√ß√µes padr√£o do sistema original
        self.dependente = ['ABEV3', 'ALOS3', 'ASAI3','BBAS3', 'BBDC4', 'BBSE3', 'BPAC11', 'BRAP4', 'BRFS3', 'BRKM5', 'CPFE3', 'CPLE6', 'CSAN3','CSNA3', 'CYRE3', 'ELET3', 'ELET6', 'EMBR3', 'ENEV3', 'ENGI11', 'EQTL3', 'EZTC3', 'FLRY3', 'GOAU4', 'HYPE3', 'IGTI11', 'IRBR3', 'ITSA4', 'ITUB4', 'KLBN11', 'MRFG3', 'NTCO3', 'PETR3', 'PETR4', 'PETZ3', 'PRIO3', 'RAIL3', 'RADL3', 'RECV3', 'RENT3', 'RDOR3', 'SANB11', 'SLCE3', 'SMTO3', 'SUZB3', 'TAEE11', 'TIMS3', 'TOTS3', 'UGPA3', 'VALE3', 'VBBR3', 'VIVT3', 'WEGE3', 'YDUQ3']
        self.independente = self.dependente.copy()
        
        self.segmentos = {
            'ABEV3': 'Bebidas', 'ALOS3': 'Sa√∫de', 'ASAI3': 'Varejo Alimentar',
            'BBAS3': 'Bancos', 'BBDC4': 'Bancos', 'BBSE3': 'Seguros',
            'BPAC11': 'Bancos', 'BRAP4': 'Holding', 'BRFS3': 'Alimentos',
            'BRKM5': 'Qu√≠mica', 'CPFE3': 'Energia', 'CPLE6': 'Energia',
            'CSAN3': 'Energia', 'CSNA3': 'Siderurgia','CYRE3': 'Constru√ß√£o',
            'ELET3': 'Energia', 'ELET6': 'Energia', 'EMBR3': 'Aeroespacial',
            'ENEV3': 'Energia', 'ENGI11': 'Energia', 'EQTL3': 'Energia', 
            'EZTC3': 'Constru√ß√£o', 'FLRY3': 'Sa√∫de', 'GOAU4': 'Siderurgia',
            'HYPE3': 'Farmac√™utica','IGTI11': 'Financeiro','IRBR3': 'Seguros', 
            'ITSA4': 'Financeiro', 'ITUB4': 'Bancos', 'KLBN11': 'Papel e Celulose',
            'MRFG3': 'Alimentos', 'NTCO3': 'Higiene/Beleza','PETR3': 'Petr√≥leo',
            'PETR4': 'Petr√≥leo', 'PETZ3': 'Varejo', 'PRIO3': 'Petr√≥leo',
            'RAIL3': 'Log√≠stica', 'RADL3': 'Varejo', 'RECV3': 'Petr√≥leo',
            'RENT3': 'Loca√ß√£o', 'RDOR3': 'Sa√∫de', 'SANB11': 'Bancos',
            'SLCE3': 'Agro', 'SMTO3': 'Agro', 'SUZB3': 'Papel e Celulose',
            'TAEE11': 'Energia', 'TIMS3': 'Telecom', 'TOTS3': 'Tecnologia',
            'UGPA3': 'Distribui√ß√£o','VALE3': 'Minera√ß√£o','VBBR3': 'Transporte',
            'VIVT3': 'Telecom', 'WEGE3': 'Industrial','YDUQ3': 'Educa√ß√£o'
        }
        
        # Thread para execu√ß√£o do sistema
        self.thread_sistema = None
        
    def conectar_mt5(self, login: int = None, password: str = None, server: str = None) -> bool:
        """Conecta ao MT5"""
        try:
            if not mt5.initialize():
                self.log("‚ùå Falha ao inicializar MT5")
                return False
                
            if login and password and server:
                if not mt5.login(login, password=password, server=server):
                    self.log(f"‚ùå Falha no login MT5: {mt5.last_error()}")
                    return False
                    
            account_info = mt5.account_info()
            if account_info:
                self.dados_sistema["saldo_inicial"] = account_info.balance
                self.dados_sistema["equity_atual"] = account_info.equity
                self.mt5_connected = True
                self.log(f"‚úÖ MT5 conectado - Conta: {account_info.login}")
                return True
            else:
                self.log("‚ùå Falha ao obter informa√ß√µes da conta")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erro ao conectar MT5: {str(e)}")
            return False
    
    def log(self, mensagem: str):
        """Adiciona log com timestamp - Sincronizado com sistema integrado"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {mensagem}"
        self.logs.append(log_entry)
        
        # Sincroniza com sistema integrado se dispon√≠vel
        if self.modo_otimizado and self.sistema_integrado:
            self.sistema_integrado.log(f"[Dashboard] {mensagem}")
        
        if len(self.logs) > 1000:  # Limita logs
            self.logs = self.logs[-500:]
        print(log_entry)  # Debug
    
    def obter_posicoes_abertas(self) -> List[Dict]:
        """Obt√©m posi√ß√µes abertas do MT5"""
        if not self.mt5_connected:
            return []
            
        try:
            positions = mt5.positions_get()
            if positions is None:
                return []
                
            posicoes = []
            for pos in positions:
                preco_atual = self.obter_preco_atual(pos.symbol)
                if preco_atual:
                    pl_atual = (preco_atual - pos.price_open) * pos.volume if pos.type == 0 else (pos.price_open - preco_atual) * pos.volume
                else:
                    pl_atual = pos.profit
                    
                posicoes.append({
                    'ticket': pos.ticket,
                    'symbol': pos.symbol,
                    'type': 'COMPRA' if pos.type == 0 else 'VENDA',
                    'volume': pos.volume,
                    'price_open': pos.price_open,
                    'price_current': preco_atual or pos.price_current,
                    'sl': pos.sl,
                    'tp': pos.tp,
                    'profit': pl_atual,
                    'time': datetime.fromtimestamp(pos.time),
                    'magic': pos.magic,
                    'comment': pos.comment
                })
            
            self.posicoes_abertas = posicoes
            self.dados_sistema["posicoes_abertas"] = len(posicoes)
            return posicoes
            
        except Exception as e:
            self.log(f"‚ùå Erro ao obter posi√ß√µes: {str(e)}")
            return []
    
    def obter_preco_atual(self, symbol: str) -> Optional[float]:
        """Obt√©m pre√ßo atual do s√≠mbolo"""
        try:
            tick = mt5.symbol_info_tick(symbol)
            return tick.bid if tick else None
        except:
            return None
    
    def fechar_posicao(self, ticket: int) -> bool:
        """Fecha posi√ß√£o espec√≠fica"""
        try:
            positions = mt5.positions_get(ticket=ticket)
            if not positions:
                return False
                
            position = positions[0]
            symbol = position.symbol
            volume = position.volume
            
            # Determina tipo de fechamento
            if position.type == mt5.ORDER_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
                price = mt5.symbol_info_tick(symbol).bid
            else:
                order_type = mt5.ORDER_TYPE_BUY
                price = mt5.symbol_info_tick(symbol).ask
            
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": volume,
                "type": order_type,
                "position": ticket,
                "price": price,
                "magic": position.magic,
                "comment": "Fechamento manual dashboard",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            result = mt5.order_send(request)
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                self.log(f"‚úÖ Posi√ß√£o {ticket} fechada com sucesso")
                return True
            else:
                self.log(f"‚ùå Erro ao fechar posi√ß√£o {ticket}: {result.comment}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erro ao fechar posi√ß√£o {ticket}: {str(e)}")
            return False
    
    def atualizar_account_info(self):
        """Atualiza informa√ß√µes da conta"""
        if not self.mt5_connected:
            return
            
        try:
            account_info = mt5.account_info()
            if account_info:
                self.dados_sistema["equity_atual"] = account_info.equity
                equity_entry = {
                    'timestamp': datetime.now(),
                    'equity': account_info.equity,
                    'balance': account_info.balance,
                    'profit': account_info.profit
                }
                self.equity_historico.append(equity_entry)                
                # Calcula lucro di√°rio
                if self.dados_sistema["saldo_inicial"] > 0:
                    self.dados_sistema["lucro_diario"] = account_info.equity - self.dados_sistema["saldo_inicial"]
                
                # Calcula drawdown
                if self.equity_historico:
                    max_equity = max([entry['equity'] for entry in self.equity_historico])
                    current_equity = account_info.equity
                    self.dados_sistema["drawdown_max"] = max(0, (max_equity - current_equity) / max_equity * 100)
                
                self.dados_sistema["ultimo_update"] = datetime.now()
                
        except Exception as e:
            self.log(f"‚ùå Erro ao atualizar conta: {str(e)}")
    
    def executar_sistema_principal(self, config: Dict):
        """Executa o sistema principal de trading com an√°lise real"""
        self.log("üöÄ Iniciando sistema principal de trading...")
        
        try:
            # Verifica se o sistema de an√°lise real est√° dispon√≠vel
            try:
                from calculo_entradas_v55 import calcular_residuo_zscore_timeframe
                self.log("‚úÖ Sistema de an√°lise real carregado com sucesso")
                usar_analise_real = True
            except ImportError as e:
                self.log(f"‚ö†Ô∏è Sistema de an√°lise real n√£o dispon√≠vel: {str(e)}")
                self.log("üìä Continuando com sistema b√°sico")
                usar_analise_real = False
            
            # Executa sistema principal
            while self.running:
                try:
                    self.dados_sistema["execucoes"] += 1
                    self.log(f"üìä Executando ciclo #{self.dados_sistema['execucoes']}")
                    
                    # Atualiza informa√ß√µes da conta
                    self.atualizar_account_info()
                    
                    # Atualiza posi√ß√µes
                    self.obter_posicoes_abertas()
                    
                    # Executa an√°lise (real ou b√°sica)
                    if usar_analise_real and self.mt5_connected:
                        self.executar_analise_real(config)
                    else:
                        # Sistema b√°sico - apenas verifica posi√ß√µes e atualiza dados
                        self.log("üìä Executando monitoramento b√°sico (sem an√°lise de sinais)")
                    
                    self.log(f"‚úÖ Ciclo #{self.dados_sistema['execucoes']} conclu√≠do")
                    
                    # Aguarda pr√≥ximo ciclo (configur√°vel)
                    intervalo = config.get('intervalo_execucao', 60)
                    time_module.sleep(intervalo)
                    
                except Exception as e:
                    self.log(f"‚ùå Erro no ciclo: {str(e)}")
                    time_module.sleep(30)
                    
        except Exception as e:
            self.log(f"‚ùå Erro no sistema principal: {str(e)}")

    def executar_analise_real(self, config: Dict):
        """Executa an√°lise real completa de duas sele√ß√µes usando calculo_entradas_v55.py"""
        try:
            # Importa o sistema de an√°lise real
            from calculo_entradas_v55 import (
                calcular_residuo_zscore_timeframe, 
                calcular_residuo_zscore_timeframe01,
                encontrar_linha_monitorada,
                filtrar_melhores_pares
            )
            
            self.log("üîÑ Iniciando an√°lise real COMPLETA com duas sele√ß√µes...")
              # Obt√©m dados hist√≥ricos via MT5
            ativos_selecionados = config.get('ativos_selecionados', self.dependente[:55])
            
            # DEBUG: Verifica se a lista de ativos est√° v√°lida
            #self.log(f"üîß DEBUG: ativos_selecionados recebidos: {ativos_selecionados}")
            #self.log(f"üîß DEBUG: Tipo: {type(ativos_selecionados)}, Tamanho: {len(ativos_selecionados) if ativos_selecionados else 0}")
              # Se a lista estiver vazia, usa todos os ativos padr√£o
            if not ativos_selecionados or len(ativos_selecionados) == 0:
                ativos_selecionados = self.dependente  # Usa TODOS os ativos dispon√≠veis
                self.log(f"üîß DEBUG: Lista vazia, usando TODOS os ativos padr√£o: {len(ativos_selecionados)} ativos")
            
            # PRODU√á√ÉO: Remove limita√ß√£o para an√°lise completa
            # Comenta a limita√ß√£o de teste - agora analisa TODOS os ativos selecionados
            # if len(ativos_selecionados) > 1:
            #     ativos_selecionados = ativos_selecionados[:55]
            #     self.log(f"üîß DEBUG: Lista muito grande, limitando a 55: {ativos_selecionados}")
            
            self.log(f"üîß DEBUG: Lista final de ativos: {len(ativos_selecionados)} ativos para an√°lise completa")
            timeframe_map = {
                "1 min": mt5.TIMEFRAME_M1,
                "5 min": mt5.TIMEFRAME_M5,                
                "15 min": mt5.TIMEFRAME_M15,                
                "30 min": mt5.TIMEFRAME_M30,
                "1 hora": mt5.TIMEFRAME_H1,
                "4 horas": mt5.TIMEFRAME_H4,
                "1 dia": mt5.TIMEFRAME_D1
            }
            
            timeframe_mt5 = timeframe_map.get(config.get('timeframe', '1 dia'), mt5.TIMEFRAME_D1)
            
            # DEBUG: Logs detalhados da configura√ß√£o recebida
            #self.log(f"üîß DEBUG: Config recebido - usar_multiplos_periodos: {config.get('usar_multiplos_periodos')}")
            #self.log(f"üîß DEBUG: Config recebido - periodo_analise: {config.get('periodo_analise')}")
            
            # Define per√≠odos de an√°lise baseado na escolha do usu√°rio
            usar_multiplos_periodos = config.get('usar_multiplos_periodos', True)
            periodo_unico = config.get('periodo_analise', 250)
            
            # DEBUG: Logs da l√≥gica de decis√£o
            #self.log(f"üîß DEBUG: usar_multiplos_periodos processado: {usar_multiplos_periodos}")
            #self.log(f"üîß DEBUG: periodo_unico processado: {periodo_unico}")
            
            if usar_multiplos_periodos:
                # Usa m√∫ltiplos per√≠odos can√¥nicos para melhor an√°lise
                periodos_analise = [70, 100, 120, 140, 160, 180, 200, 220, 240, 250]
                self.log(f"üîÑ Modo: M√∫ltiplos per√≠odos can√¥nicos - {periodos_analise}")
            else:
                # Usa apenas o per√≠odo selecionado pelo usu√°rio
                periodos_analise = [periodo_unico]
                self.log(f"üîÑ Modo: Per√≠odo √∫nico - {periodo_unico}")
            
            # DEBUG: Confirma√ß√£o final dos per√≠odos
            #self.log(f"üîß DEBUG: periodos_analise final: {periodos_analise}")
            #self.log(f"üîß DEBUG: Quantidade de per√≠odos a processar: {len(periodos_analise)}")
            
            # Coleta dados hist√≥ricos com o maior per√≠odo necess√°rio
            periodo_maximo = max(periodos_analise)
            #self.log(f"üîÑ Coletando dados hist√≥ricos para per√≠odos: {periodos_analise} (m√°ximo: {periodo_maximo})")
            
            # Coleta dados hist√≥ricos do MT5
            dados_preprocessados = self.obter_dados_historicos_mt5(ativos_selecionados + ['IBOV'], timeframe_mt5, periodo_maximo)
            
            if not dados_preprocessados:
                self.log("‚ùå Falha ao obter dados hist√≥ricos do MT5")
                return
            
            # Diagn√≥stico dos dados coletados
            self.log(f"üîç S√≠mbolos dispon√≠veis nos dados: {list(dados_preprocessados.keys())}")
            for simbolo in dados_preprocessados:
                if 'close' in dados_preprocessados[simbolo]:
                    close_data = dados_preprocessados[simbolo]['close']
                    if close_data and 'raw' in close_data:
                        tamanho = len(close_data['raw']) if close_data['raw'] is not None else 0
                        #self.log(f"üìä {simbolo}: {tamanho} registros de close dispon√≠veis")
                    else:
                        self.log(f"‚ö†Ô∏è {simbolo}: dados de close inv√°lidos")
                else:                    self.log(f"‚ö†Ô∏è {simbolo}: sem dados de close")
              # Par√¢metros de filtro baseados na configura√ß√£o (valores originais rigorosos)
            filter_params = {
                'enable_zscore_filter': config.get('filtro_zscore', True),
                'enable_r2_filter': config.get('filtro_r2', True), 
                'enable_beta_filter': config.get('filtro_beta', True),
                'enable_cointegration_filter': config.get('filtro_cointegra√ß√£o', True),
                'zscore_min_threshold': -config.get('zscore_min', 2.0),
                'zscore_max_threshold': config.get('zscore_max', 2.0),
                'r2_min_threshold': config.get('r2_min', 0.50),
                'beta_max_threshold': 1.5
            }
            
            #self.log(f"üîß Filtros aplicados:")
            #self.log(f"   - Z-Score: {filter_params['enable_zscore_filter']}")
            #self.log(f"   - R¬≤: {filter_params['enable_r2_filter']}")
            #self.log(f"   - Beta: {filter_params['enable_beta_filter']}")
            #self.log(f"   - Cointegra√ß√£o: {filter_params['enable_cointegration_filter']}")
              # ========================================================================
            # PRIMEIRA SELE√á√ÉO: An√°lise inicial de todos os pares
            # ========================================================================
            self.log("üìä Executando PRIMEIRA SELE√á√ÉO de pares...")
            self.log(f"üî• PRODU√á√ÉO: Analisando {len(ativos_selecionados)} ativos dependentes x {len(self.independente)} independentes")
            self.log(f"üî• PRODU√á√ÉO: Total de pares poss√≠veis: {len(ativos_selecionados) * len(self.independente)} combina√ß√µes")
            self.log(f"üî• PRODU√á√ÉO: Per√≠odos por par: {len(periodos_analise)} = {len(ativos_selecionados) * len(self.independente) * len(periodos_analise)} c√°lculos totais")
            
            resultados_zscore_dependente_atual = []
            id_counter = 1
              # Loop para calcular Z-Score para cada par usando dados pr√©-processados
            pares_tentados = 0
            pares_com_erro = 0
            pares_resultado_none = 0
            pares_zscore_none = 0
            
            for dep_idx, dep in enumerate(ativos_selecionados):  # PRODU√á√ÉO: Analisa TODOS os ativos selecionados
                self.log(f"üîÑ Processando ativo {dep_idx+1}/{len(ativos_selecionados)}: {dep}")
                for ind in self.independente:  # PRODU√á√ÉO: Testa contra TODOS os independentes
                    if dep != ind:
                        # Verifica se ambos os ativos est√£o nos dados pr√©-processados
                        if dep not in dados_preprocessados:
                            self.log(f"‚ö†Ô∏è {dep} n√£o encontrado nos dados pr√©-processados")
                            continue
                        if ind not in dados_preprocessados:
                            self.log(f"‚ö†Ô∏è {ind} n√£o encontrado nos dados pr√©-processados")
                            continue
                        if 'IBOV' not in dados_preprocessados:
                            self.log(f"‚ö†Ô∏è IBOV n√£o encontrado nos dados pr√©-processados")
                            continue
                          # Testa m√∫ltiplos per√≠odos para o mesmo par
                        melhor_resultado = None
                        melhor_periodo = None
                        
                        # DEBUG: Log de quantos per√≠odos ser√£o testados para este par
                        #if len(periodos_analise) > 1:
                            #self.log(f"üîß DEBUG: Testando {len(periodos_analise)} per√≠odos para par {dep}x{ind}: {periodos_analise}")
                        
                        for i, periodo_atual in enumerate(periodos_analise):
                            pares_tentados += 1
                            
                            # DEBUG: Log do per√≠odo atual sendo processado
                            #self.log(f"üîß DEBUG: Processando per√≠odo {i+1}/{len(periodos_analise)}: {periodo_atual} para {dep}x{ind}")
                            
                            try:# Executa an√°lise real do par (com filtros originais)
                                resultado = calcular_residuo_zscore_timeframe(
                                    dep=dep,
                                    ind=ind, 
                                    ibov='IBOV',
                                    win='IBOV',  # Usa IBOV como refer√™ncia de mercado
                                    periodo=periodo_atual,
                                    dados_preprocessados=dados_preprocessados,
                                    USE_SPREAD_FORECAST=True,
                                    zscore_threshold=2.0,  # Valor original
                                    verbose=False,
                                    enable_zscore_filter=filter_params.get('enable_zscore_filter', True),
                                    enable_r2_filter=filter_params.get('enable_r2_filter', True),
                                    enable_beta_filter=filter_params.get('enable_beta_filter', True),
                                    enable_cointegration_filter=filter_params.get('enable_cointegration_filter', True),
                                    zscore_min_threshold=filter_params.get('zscore_min_threshold', -2.0),
                                    zscore_max_threshold=filter_params.get('zscore_max_threshold', 2.0),
                                    r2_min_threshold=filter_params.get('r2_min_threshold', 0.50),
                                    beta_max_threshold=filter_params.get('beta_max_threshold', 1.5)
                                )
                                
                                if resultado is None:
                                    pares_resultado_none += 1
                                    continue
                                
                                # Desempacota o resultado
                                alpha, beta, half_life, zscore, residuo, adf_p_value, pred_resid, resid_atual, zscore_forecast_compra, zscore_forecast_venda, zf_compra, zf_venda, nd_dep, nd_ind, coint_p_value, r2 = resultado
                                
                                if zscore is None:
                                    pares_zscore_none += 1
                                    continue
                                
                                # Se encontrou um resultado v√°lido, guarda o melhor (maior |zscore|)
                                if melhor_resultado is None or abs(zscore) > abs(melhor_resultado[3]):
                                    melhor_resultado = resultado
                                    melhor_periodo = periodo_atual
                                    
                            except Exception as e:
                                pares_com_erro += 1
                                self.log(f"‚ö†Ô∏è Erro ao analisar {dep}x{ind} (per√≠odo {periodo_atual}): {str(e)[:100]}")
                                continue
                        
                        # Se encontrou pelo menos um resultado v√°lido, adiciona o melhor
                        if melhor_resultado is not None:
                            alpha, beta, half_life, zscore, residuo, adf_p_value, pred_resid, resid_atual, zscore_forecast_compra, zscore_forecast_venda, zf_compra, zf_venda, nd_dep, nd_ind, coint_p_value, r2 = melhor_resultado
                            
                            self.log(f"‚úÖ Par {dep}x{ind} (per√≠odo {melhor_periodo}): zscore={zscore:.3f}, r2={r2:.3f}, beta={beta:.3f}")
                            
                            resultados_zscore_dependente_atual.append({
                                'ID': id_counter,
                                'Dependente': dep,
                                'Independente': ind, 
                                'Timeframe': config.get('timeframe', '1 dia'),
                                'Per√≠odo': melhor_periodo,  # Usa o melhor per√≠odo encontrado
                                'Z-Score': zscore, 
                                'alpha': alpha,
                                'beta': beta,
                                'half_life': half_life,
                                'r2': r2,
                                'adf_p_value': adf_p_value,
                                'coint_p_value': coint_p_value,
                                'residuo': residuo,
                                'residuo_std': resid_atual if resid_atual is not None else 0,
                                'nd_dep': nd_dep,
                                'nd_ind': nd_ind,
                                'pred_resid': pred_resid,
                                'zscore_forecast_compra': zscore_forecast_compra,
                                'zscore_forecast_venda': zscore_forecast_venda
                            })
                            id_counter += 1
            
            self.log(f"üìä Estat√≠sticas primeira sele√ß√£o:")
            self.log(f"   - Pares x per√≠odos tentados: {pares_tentados}")
            self.log(f"   - Pares com erro: {pares_com_erro}")
            self.log(f"   - Pares resultado None: {pares_resultado_none}")
            self.log(f"   - Pares zscore None: {pares_zscore_none}")
            self.log(f"‚úÖ Primeira sele√ß√£o: {len(resultados_zscore_dependente_atual)} pares analisados")
            
            if not resultados_zscore_dependente_atual:
                self.log("‚ùå Nenhum par v√°lido encontrado na primeira sele√ß√£o")
                return
            
            # Converte para DataFrame
            tabela_zscore_dependente_atual = pd.DataFrame(resultados_zscore_dependente_atual)
            
            # Aplica filtros da primeira sele√ß√£o
            linha_operacao = []
            linha_operacao = encontrar_linha_monitorada(
                tabela_zscore_dependente_atual, 
                linha_operacao, 
                dados_preprocessados, 
                filter_params, 
                enable_cointegration_filter=filter_params.get('enable_cointegration_filter', True)
            )
              # Filtra os melhores pares da primeira sele√ß√£o
            tabela_linha_operacao = filtrar_melhores_pares(linha_operacao)
            
            self.log(f"üìà Primeira sele√ß√£o filtrada: {len(tabela_linha_operacao)} pares selecionados")
              # CORRE√á√ÉO: Armazena a primeira sele√ß√£o na sess√£o para exibi√ß√£o na aba "Sinais"
            if hasattr(st.session_state, 'trading_system') and st.session_state.trading_system:
                st.session_state.trading_system.tabela_linha_operacao = tabela_linha_operacao
                self.log(f"üíæ Primeira sele√ß√£o armazenada na sess√£o: {len(tabela_linha_operacao)} pares")
                
                # NOVA FUNCIONALIDADE: Gera sinais b√°sicos da primeira sele√ß√£o para aba "Sinais"
                sinais_primeira_selecao = []
                for _, linha in tabela_linha_operacao.iterrows():
                    zscore = linha['Z-Score']
                    r2 = linha.get('r2', 0)
                    beta = linha.get('beta', 1)
                    p_value = linha.get('adf_p_value', 1)
                    confianca = min(90, (r2 * 100) * (1 - p_value)) if p_value < 1 else 50
                    
                    sinal = {
                        'par': f"{linha['Dependente']}/{linha['Independente']}",
                        'ativo': linha['Dependente'],
                        'zscore': zscore,
                        'r2': r2,
                        'beta': beta,
                        'p_value': p_value,
                        'sinal': 'COMPRA' if zscore < -1.5 else 'VENDA',
                        'confianca': confianca,
                        'timestamp': datetime.now(),
                        'preco_atual': self.obter_preco_atual(linha['Dependente']) or 0,
                        'segmento': self.segmentos.get(linha['Dependente'], 'Outros'),
                        'status': 'PRIMEIRA_SELECAO',  # Marca como primeira sele√ß√£o
                        'tipo_analise': 'Primeira Sele√ß√£o'
                    }
                    sinais_primeira_selecao.append(sinal)
                
                # Armazena sinais da primeira sele√ß√£o temporariamente (ser√£o substitu√≠dos pela segunda se dispon√≠vel)
                self.sinais_ativos = sinais_primeira_selecao
                self.log(f"üìä Gerados {len(sinais_primeira_selecao)} sinais da primeira sele√ß√£o para dashboard")
            
            if tabela_linha_operacao.empty:
                self.log("‚ùå Nenhum par passou nos filtros da primeira sele√ß√£o")
                return
            
            # ========================================================================
            # SEGUNDA SELE√á√ÉO: An√°lise refinada dos pares selecionados
            # ========================================================================
            self.log("üéØ Executando SEGUNDA SELE√á√ÉO (refinamento com calcular_residuo_zscore_timeframe01)...")
            
            linha_operacao01 = []
            resultados_zscore_dependente_atual01 = []            # Loop pelos pares da primeira sele√ß√£o para segunda an√°lise
            for linha in tabela_linha_operacao.itertuples():
                dependente_atual01 = linha.Dependente
                independente_atual01 = linha.Independente
                periodo_atual = linha.Per√≠odo
                
                try:
                    # Busca dados adicionais da primeira sele√ß√£o ANTES de chamar a fun√ß√£o
                    registro_primeira = tabela_linha_operacao[
                        (tabela_linha_operacao['Dependente'] == dependente_atual01) &
                        (tabela_linha_operacao['Independente'] == independente_atual01)
                    ]
                    
                    if registro_primeira.empty:
                        self.log(f"‚ö†Ô∏è Registro da primeira sele√ß√£o n√£o encontrado para {dependente_atual01}x{independente_atual01}")
                        continue
                    
                    reg = registro_primeira.iloc[0]
                      # CORRIGIDO: Extrai zscore e r2 da PRIMEIRA sele√ß√£o (como no c√≥digo original)
                    zscore = reg.get("Z-Score")
                    r2 = reg.get("r2")
                    beta = reg.get("beta")
                    alpha = reg.get("alpha")
                    half_life = reg.get("half_life")
                    adf_p_value = reg.get("adf_p_value")
                    coint_p_value = reg.get("coint_p_value")
                    residuo = reg.get("residuo")
                    pred_resid = reg.get("pred_resid")
                    zscore_forecast_compra = reg.get("zscore_forecast_compra")
                    zscore_forecast_venda = reg.get("zscore_forecast_venda")
                    
                    # CORRE√á√ÉO CR√çTICA: Adiciona vari√°veis beta_rotation necess√°rias para encontrar_linha_monitorada01
                    beta_rotation = reg.get("beta_rotation", beta)  # Usa beta normal se n√£o houver rotation
                    beta_rotation_mean = reg.get("beta_rotation_mean", beta)  # Fallback para beta
                    beta_rotation_std = reg.get("beta_rotation_std", 0.1)
                    correlacao_ibov = reg.get("correlacao_ibov", 0.5)
                    correlacao = reg.get("correlacao", 0.5)
                    forecast = reg.get("forecast", 0.0)
                    
                    self.log(f"üîß DEBUG: Valores da 1¬™ sele√ß√£o - zscore={zscore:.3f}, r2={r2:.3f}, beta_rot={beta_rotation:.3f}")
                    
                    # Executa an√°lise refinada do par (s√≥ para obter dados de previs√£o e spreads)
                    resultado = calcular_residuo_zscore_timeframe01(
                        dep=dependente_atual01,
                        ind=independente_atual01,
                        ibov='IBOV',
                        win='IBOV',
                        periodo=periodo_atual,
                        dados_preprocessados=dados_preprocessados,
                        tabela_linha_operacao=linha_operacao,  # Passa resultados da primeira sele√ß√£o
                        tolerancia=0.010,
                        min_train=70,
                        verbose=False
                    )                    
                    if resultado and len(resultado) >= 30:
                        # A fun√ß√£o calcular_residuo_zscore_timeframe01 retorna dados de previs√£o e spreads
                        #self.log(f"üîß DEBUG: Fun√ß√£o retornou {len(resultado)} valores para dados de previs√£o")
                        
                        # Extrai dados de previs√£o da fun√ß√£o (n√£o zscore/r2)
                        (data_prev, previsao_fechamento, previsao_maximo, previsao_minimo, 
                        previsao_fechamento_ind, previsao_maximo_ind, previsao_minimo_ind,
                        preco_ontem, preco_atual, preco_abertura, 
                        preco_max_atual, preco_min_atual, 
                        spread_compra, spread_compra_gain, spread_compra_loss, 
                        spread_venda, spread_venda_gain, spread_venda_loss,                             
                        std_arima_close, std_arima_high, std_arima_low,
                        sigma_close, sigma_high, sigma_low,
                        indep_preco_ontem, indep_preco_atual, indep_preco_abertura,
                        indep_preco_max_atual, indep_preco_min_atual,
                        indep_spread_compra, indep_spread_compra_gain, indep_spread_compra_loss, 
                        indep_spread_venda, indep_spread_venda_gain, indep_spread_venda_loss, 
                        std_arima_close_ind, std_arima_high_ind, std_arima_low_ind,                        sigma_close_ind, sigma_high_ind, sigma_low_ind) = resultado
                        
                        if zscore is not None and abs(zscore) > 1.5:  # Filtro adicional usando zscore da 1¬™ sele√ß√£o
                            self.log(f"‚úÖ Par {dependente_atual01}x{independente_atual01} (segunda sele√ß√£o): zscore={zscore:.3f}, r2={r2:.3f}")
                            
                            resultados_zscore_dependente_atual01.append({
                                'ID': len(resultados_zscore_dependente_atual01) + 1,
                                'Dependente': dependente_atual01,
                                'Independente': independente_atual01,
                                'Timeframe': config.get('timeframe', '1 dia'),
                                'Per√≠odo': periodo_atual,
                                'Z-Score': zscore,  # Da primeira sele√ß√£o
                                'alpha': alpha,     # Da primeira sele√ß√£o
                                'beta': beta,       # Da primeira sele√ß√£o
                                'half_life': half_life,  # Da primeira sele√ß√£o
                                'r2': r2,           # Da primeira sele√ß√£o
                                'adf_p_value': adf_p_value,      # Da primeira sele√ß√£o
                                'coint_p_value': coint_p_value,  # Da primeira sele√ß√£o
                                'residuo': residuo,              # Da primeira sele√ß√£o
                                'pred_resid': pred_resid,        # Da primeira sele√ß√£o
                                'zscore_forecast_compra': zscore_forecast_compra,  # Da primeira sele√ß√£o
                                'zscore_forecast_venda': zscore_forecast_venda,    # Da primeira sele√ß√£o
                                
                                # CORRE√á√ÉO CR√çTICA: Adiciona vari√°veis essenciais para encontrar_linha_monitorada01
                                'beta_rotation': beta_rotation,        # Necess√°rio para filtros da 2¬™ sele√ß√£o
                                'beta_rotation_mean': beta_rotation_mean,  # Necess√°rio para compara√ß√£o
                                'beta_rotation_std': beta_rotation_std,
                                'correlacao_ibov': correlacao_ibov,
                                'correlacao': correlacao,
                                'forecast': forecast,
                                
                                # Dados de previs√£o e spreads da segunda an√°lise
                                'preco_atual': preco_atual,
                                'preco_max_atual': preco_max_atual,
                                'preco_min_atual': preco_min_atual,
                                'previsao_fechamento': previsao_fechamento,
                                'previsao_maximo': previsao_maximo,
                                'previsao_minimo': previsao_minimo,
                                'spread_compra': spread_compra,
                                'spread_venda': spread_venda,
                                
                                # Dados do independente
                                'preco_atual_indep': indep_preco_atual,
                                'previsao_fechamento_ind': previsao_fechamento_ind,
                                
                                'Passou_Filtros': True
                            })
                        else:
                            self.log(f"‚ö†Ô∏è Par {dependente_atual01}x{independente_atual01} n√£o passou no filtro zscore: {zscore}")
                            
                    elif resultado:
                        self.log(f"‚ö†Ô∏è Fun√ß√£o retornou apenas {len(resultado)} valores (esperado: >=30) para {dependente_atual01}x{independente_atual01}")
                        continue
                    else:
                        self.log(f"‚ö†Ô∏è Fun√ß√£o retornou None para {dependente_atual01}x{independente_atual01}")
                        continue
                                
                except Exception as e:
                    self.log(f"‚ö†Ô∏è Erro na segunda sele√ß√£o {dependente_atual01}x{independente_atual01}: {str(e)[:100]}")
                    continue
            
            self.log(f"üéØ Segunda sele√ß√£o: {len(resultados_zscore_dependente_atual01)} pares refinados")
            
            if not resultados_zscore_dependente_atual01:
                self.log("‚ùå Nenhum par v√°lido na segunda sele√ß√£o")
                return
            
            # Converte segunda sele√ß√£o para DataFrame
            tabela_zscore_dependente_atual01 = pd.DataFrame(resultados_zscore_dependente_atual01)
            
            # Encontra linhas monitoradas da segunda sele√ß√£o  
            from calculo_entradas_v55 import encontrar_linha_monitorada01
            linha_operacao01 = encontrar_linha_monitorada01(tabela_zscore_dependente_atual01, linha_operacao01)
            
            # Aplica prioriza√ß√£o final baseada na proximidade de pre√ßos
            if linha_operacao01:
                self.log(f"üíº Aplicando prioriza√ß√£o final para {len(linha_operacao01)} pares...")
                
                selecao_com_prioridade = []
                for linha_dict in linha_operacao01:
                    dep = linha_dict['Dependente']
                    zscore = linha_dict['Z-Score']
                    
                    try:
                        preco_atual = linha_dict.get('preco_atual', 0.0)
                        spread_compra = linha_dict.get('spread_compra', preco_atual)
                        spread_venda = linha_dict.get('spread_venda', preco_atual)
                        
                        # Determina pre√ßo de entrada baseado no Z-Score
                        if zscore <= -2.0:
                            preco_entrada = spread_compra  # Comprar dependente
                        elif zscore >= 2.0:
                            preco_entrada = spread_venda   # Vender dependente
                        else:
                            preco_entrada = preco_atual
                        
                        # Calcula percentual de diferen√ßa
                        if preco_atual > 0:
                            perc_diferenca = abs((preco_entrada - preco_atual) / preco_atual * 100)
                        else:
                            perc_diferenca = 999.0
                        
                        linha_com_prioridade = linha_dict.copy()
                        linha_com_prioridade['Perc_Diferenca'] = perc_diferenca
                        linha_com_prioridade['Preco_Entrada_Final'] = preco_entrada
                        selecao_com_prioridade.append(linha_com_prioridade)
                        
                    except Exception as e:
                        linha_com_prioridade = linha_dict.copy()
                        linha_com_prioridade['Perc_Diferenca'] = 999.0
                        linha_com_prioridade['Preco_Entrada_Final'] = 0.0
                        selecao_com_prioridade.append(linha_com_prioridade)
                
                # Ordena por proximidade de pre√ßo (menor diferen√ßa primeiro)
                linha_operacao01 = sorted(selecao_com_prioridade, key=lambda x: x['Perc_Diferenca'])
                
                # Converte para DataFrame final (tabela_linha_operacao01)
                tabela_linha_operacao01 = pd.DataFrame(linha_operacao01)
                
                self.log(f"üèÜ AN√ÅLISE COMPLETA: {len(tabela_linha_operacao01)} pares FINAIS priorizados")                # CORRE√á√ÉO: A fun√ß√£o encontrar_linha_monitorada01 j√° aplica os filtros corretos
                # Todos os pares em tabela_linha_operacao01 j√° passaram pela valida√ß√£o
                sinais_detectados = []
                
                self.log(f"‚úÖ PROCESSANDO {len(tabela_linha_operacao01)} pares PR√â-APROVADOS da segunda sele√ß√£o...")
                
                for _, linha in tabela_linha_operacao01.iterrows():
                    zscore = linha['Z-Score']
                    r2 = linha.get('r2', 0)
                    beta = linha.get('beta', 1)
                    beta_rotation = linha.get('beta_rotation', beta)
                    beta_rotation_mean = linha.get('beta_rotation_mean', beta)
                    p_value = linha.get('adf_p_value', 1)
                    
                    # DETERMINA TIPO DE SINAL - J√Å PASSOU PELOS FILTROS
                    if zscore >= 2.0:
                        tipo_sinal = 'VENDA'  # Vender dependente
                        self.log(f"‚úÖ SINAL VENDA: {linha['Dependente']} - Z={zscore:.2f}, Œ≤_rot={beta_rotation:.3f}")
                    elif zscore <= -2.0:
                        tipo_sinal = 'COMPRA'  # Comprar dependente
                        self.log(f"‚úÖ SINAL COMPRA: {linha['Dependente']} - Z={zscore:.2f}, Œ≤_rot={beta_rotation:.3f}")
                    else:
                        # N√£o deveria chegar aqui, mas mant√©m por seguran√ßa
                        tipo_sinal = 'COMPRA' if zscore < 0 else 'VENDA'
                        self.log(f"‚ö†Ô∏è SINAL INESPERADO: {linha['Dependente']} - Z={zscore:.2f}")
                    
                    confianca = min(95, (r2 * 100) * (1 - p_value)) if p_value < 1 else 50
                    
                    sinal = {
                        'par': f"{linha['Dependente']}/{linha['Independente']}",
                        'ativo': linha['Dependente'],
                        'zscore': zscore,                        
                        'r2': r2,
                        'beta': beta,
                        'beta_rotation': beta_rotation,
                        'beta_rotation_mean': beta_rotation_mean,
                        'p_value': p_value,
                        'sinal': tipo_sinal,
                        'confianca': confianca,
                        'timestamp': datetime.now(),
                        'preco_atual': self.obter_preco_atual(linha['Dependente']) or 0,
                        'segmento': self.segmentos.get(linha['Dependente'], 'Outros'),
                        'status': 'REAL',  # Marca como an√°lise real
                        'preco_entrada': linha.get('Preco_Entrada_Final', 0),
                        'diferenca_preco': linha.get('Perc_Diferenca', 0),
                        'forecast': linha.get('forecast', 0),
                        'correlacao': linha.get('correlacao', 0)
                    }
                    sinais_detectados.append(sinal)
                  # Atualiza sinais com dados reais da segunda sele√ß√£o
                self.sinais_ativos = sinais_detectados
                self.dados_sistema["pares_processados"] = len(tabela_linha_operacao01)                
                self.log(f"üèÜ AN√ÅLISE FINAL: {len(sinais_detectados)} sinais PREMIUM da segunda sele√ß√£o carregados")
                
            else:
                self.log("‚ùå Nenhum par priorit√°rio encontrado na segunda sele√ß√£o")
                self.sinais_ativos = []
                tabela_linha_operacao01 = pd.DataFrame()  # Cria DataFrame vazio
                
            # SEMPRE armazena tabela_linha_operacao01 no session state (mesmo se vazia)
            if hasattr(st.session_state, 'trading_system') and st.session_state.trading_system:
                st.session_state.trading_system.tabela_linha_operacao01 = tabela_linha_operacao01
                self.log(f"üíæ Tabela segunda sele√ß√£o salva: {len(tabela_linha_operacao01)} registros")
                
        except ImportError as e:
            self.log(f"‚ùå Sistema de an√°lise real n√£o dispon√≠vel: {str(e)}")
            self.log("üìä Execute sem an√°lise de sinais - apenas monitoramento")
        except Exception as e:
            self.log(f"‚ùå Erro na an√°lise real: {str(e)}")
            self.log("üìä Continuando apenas com monitoramento b√°sico")

    def obter_dados_historicos_mt5(self, simbolos: List[str], timeframe, periodo: int) -> Dict:
        """Obt√©m dados hist√≥ricos do MT5 para an√°lise"""
        if not self.mt5_connected:
            self.log("‚ùå MT5 n√£o conectado - n√£o √© poss√≠vel obter dados hist√≥ricos")
            return {}
            
        # DEBUG: Log dos s√≠mbolos recebidos
        #self.log(f"üîß DEBUG: S√≠mbolos solicitados: {simbolos}")
        #self.log(f"üîß DEBUG: Timeframe: {timeframe}, Per√≠odo: {periodo}")
          # Primeiro, coleta dados brutos do MT5
        dados_historicos = {}
        
        try:
            for simbolo_original in simbolos:
                #self.log(f"üîß DEBUG: Processando s√≠mbolo: {simbolo_original}")
                
                try:
                    # Primeiro, verifica se o s√≠mbolo existe no MT5
                    symbol_info = mt5.symbol_info(simbolo_original)
                    if symbol_info is None:
                        self.log(f"‚ùå S√≠mbolo {simbolo_original} n√£o encontrado no MT5")
                        continue
                    
                    self.log(f"‚úÖ S√≠mbolo {simbolo_original} encontrado: {symbol_info.description}")
                    
                    # Obt√©m dados hist√≥ricos
                    #self.log(f"üîß DEBUG: Solicitando {periodo} registros para {simbolo_original}")
                    rates = mt5.copy_rates_from_pos(simbolo_original, timeframe, 0, periodo)
                    
                    if rates is not None and len(rates) > 0:
                        df = pd.DataFrame(rates)
                        df['time'] = pd.to_datetime(df['time'], unit='s')
                        df.set_index('time', inplace=True)
                        
                        # Armazena dados brutos
                        dados_historicos[simbolo_original] = df
                        #self.log(f"‚úÖ {len(df)} registros coletados para {simbolo_original}")
                        
                    else:
                        self.log(f"‚ùå Nenhum dado hist√≥rico retornado para {simbolo_original}")
                        # Verifica o erro do MT5
                        erro_mt5 = mt5.last_error()
                        self.log(f"‚ùå Erro MT5: {erro_mt5}")
                        
                except Exception as e:
                    self.log(f"‚ùå Erro ao processar {simbolo_original}: {str(e)}")
                    continue
                    
        except Exception as e:
            self.log(f"‚ùå Erro geral ao obter dados hist√≥ricos: {str(e)}")
            return {}
        
        #self.log(f"üîß DEBUG: S√≠mbolos coletados com sucesso: {list(dados_historicos.keys())}")
        
        # Agora usa a fun√ß√£o de pr√©-processamento do sistema original
        if dados_historicos:
            try:
                from calculo_entradas_v55 import preprocessar_dados
                
                # Define colunas a serem pr√©-processadas
                colunas = ['close', 'open', 'high', 'low']
                
                #self.log(f"üîß DEBUG: Aplicando pr√©-processamento para {len(dados_historicos)} s√≠mbolos")
                
                # Aplica o pr√©-processamento correto
                dados_preprocessados = preprocessar_dados(dados_historicos, list(dados_historicos.keys()), colunas, verbose=False)
                
                #self.log(f"‚úÖ Dados pr√©-processados para {len(dados_preprocessados)} s√≠mbolos")
                #self.log(f"üîß DEBUG: S√≠mbolos p√≥s-processamento: {list(dados_preprocessados.keys())}")
                
                return dados_preprocessados
                
            except ImportError as e:
                self.log(f"‚ùå Erro ao importar preprocessar_dados: {str(e)}")
                return {}
            except Exception as e:
                self.log(f"‚ùå Erro no pr√©-processamento: {str(e)}")
                return {}
        else:
            self.log("‚ùå Nenhum dado hist√≥rico coletado")
            return {}
            

    def obter_historico_trades_real(self, data_inicio: datetime, data_fim: datetime) -> List[Dict]:
        """Obt√©m hist√≥rico real de trades do MT5"""
        if not self.mt5_connected:
            self.log("‚ö†Ô∏è MT5 n√£o conectado para buscar hist√≥rico de trades")
            return []
            
        try:
            # Busca hist√≥rico de ordens do MT5
            deals = mt5.history_deals_get(data_inicio, data_fim)
            
            if deals is None or len(deals) == 0:
                self.log("‚ÑπÔ∏è Nenhum trade encontrado no per√≠odo")
                return []
            
            trades_processados = []
            
            for deal in deals:
                # Converte deal do MT5 para formato do dashboard
                trade = {
                    'Ticket': deal.ticket,
                    'Par': deal.symbol,
                    'Tipo': 'COMPRA' if deal.type == 0 else 'VENDA',
                    'Data': datetime.fromtimestamp(deal.time),
                    'Volume': deal.volume,
                    'Pre√ßo': deal.price,
                    'Comiss√£o': deal.commission,
                    'Swap': deal.swap,
                    'Lucro': deal.profit,
                    'Coment√°rio': deal.comment if hasattr(deal, 'comment') else '',
                    'Ordem': deal.order
                }
                trades_processados.append(trade)
            
            #self.log(f"‚úÖ {len(trades_processados)} trades carregados do MT5")
            return trades_processados
            
        except Exception as e:
            self.log(f"‚ùå Erro ao buscar hist√≥rico de trades: {str(e)}")
            return []
    
    def calcular_estatisticas_performance_real(self, trades: List[Dict]) -> Dict:
        """Calcula estat√≠sticas reais de performance baseado nos trades do MT5"""
        if not trades:
            return {
                'total_trades': 0,
                'win_rate': 0.0,
                'resultado_total': 0.0,
                'resultado_medio': 0.0,
                'melhor_trade': 0.0,
                'pior_trade': 0.0,
                'sharpe_ratio': 0.0,
                'max_drawdown': 0.0,
                'profit_factor': 0.0
            }
        
        try:
            lucros = [trade['Lucro'] for trade in trades if 'Lucro' in trade]
            
            if not lucros:
                return {'total_trades': len(trades), 'win_rate': 0.0, 'resultado_total': 0.0}
            
            trades_lucrativos = [l for l in lucros if l > 0]
            trades_prejuizo = [l for l in lucros if l < 0]
            
            # Estat√≠sticas b√°sicas
            total_trades = len(trades)
            win_rate = (len(trades_lucrativos) / total_trades) * 100 if total_trades > 0 else 0
            resultado_total = sum(lucros)
            resultado_medio = np.mean(lucros) if lucros else 0
            melhor_trade = max(lucros) if lucros else 0
            pior_trade = min(lucros) if lucros else 0
            
            # Profit Factor
            total_lucros = sum(trades_lucrativos) if trades_lucrativos else 0
            total_perdas = abs(sum(trades_prejuizo)) if trades_prejuizo else 1
            profit_factor = total_lucros / total_perdas if total_perdas > 0 else 0
            
            # Sharpe Ratio simplificado
            if len(lucros) > 1:
                sharpe_ratio = np.mean(lucros) / np.std(lucros) if np.std(lucros) > 0 else 0
            else:
                sharpe_ratio = 0
            
            # Drawdown m√°ximo
            equity_curve = np.cumsum(lucros)
            running_max = np.maximum.accumulate(equity_curve)
            drawdown = (equity_curve - running_max) / running_max * 100
            max_drawdown = abs(min(drawdown)) if len(drawdown) > 0 else 0
            
            return {
                'total_trades': total_trades,
                'win_rate': win_rate,
                'resultado_total': resultado_total,
                'resultado_medio': resultado_medio,
                'melhor_trade': melhor_trade,
                'pior_trade': pior_trade,
                'sharpe_ratio': sharpe_ratio,
                'max_drawdown': max_drawdown,
                'profit_factor': profit_factor
            }
            
        except Exception as e:
            self.log(f"‚ùå Erro ao calcular estat√≠sticas: {str(e)}")
            return {'total_trades': 0, 'win_rate': 0.0, 'resultado_total': 0.0}
    
    def iniciar_sistema(self, config: Dict):
        """Inicia o sistema de trading - Vers√£o otimizada com threading avan√ßado"""
        if self.running:
            return False
        
        self.running = True
        
        if self.modo_otimizado and self.sistema_integrado:
            # Usa sistema integrado com threading avan√ßado
            self.log("üöÄ Iniciando sistema com threading avan√ßado...")
            self.log("‚úÖ Threads ativas:")
            self.log("   üìä Monitoramento geral")
            self.log("   üîç Monitoramento de posi√ß√µes")
            self.log("   üìà Break-even cont√≠nuo")
            self.log("   ‚è∞ Ajustes programados")
            
            # Inicia sistema integrado em thread separada
            self.thread_sistema = threading.Thread(
                target=self.executar_sistema_integrado,
                args=(config,),
                daemon=True,
                name="SistemaIntegradoDashboard"
            )
            self.thread_sistema.start()
            
            # Thread adicional para sincroniza√ß√£o de dados
            self.thread_sync = threading.Thread(
                target=self.sincronizar_dados_sistema,
                daemon=True,
                name="SincronizacaoDados"
            )
            self.thread_sync.start()
            
        else:
            # Modo b√°sico (original)
            self.log("‚ö†Ô∏è Iniciando sistema em modo b√°sico...")
            self.thread_sistema = threading.Thread(
                target=self.executar_sistema_principal,
                args=(config,),
                daemon=True
            )
            self.thread_sistema.start()
            
        self.log("‚úÖ Sistema iniciado com sucesso")
        return True
    
    def executar_sistema_integrado(self, config: Dict):
        """Executa sistema integrado completo com todas as threads"""
        try:
            self.log("üéØ Inicializando sistema integrado completo...")
            
            # Conecta MT5 se necess√°rio
            if not self.mt5_connected:
                self.conectar_mt5()
            
            # Inicia sistema integrado
            self.sistema_integrado.iniciar_sistema()
            
        except Exception as e:
            self.log(f"‚ùå Erro no sistema integrado: {str(e)}")
            # Fallback para sistema b√°sico
            self.executar_sistema_principal(config)
    
    def sincronizar_dados_sistema(self):
        """Thread para sincronizar dados entre dashboard e sistema integrado"""
        while self.running:
            try:
                if self.sistema_integrado and self.modo_otimizado:
                    # Sincroniza dados do sistema integrado
                    self.dados_sistema.update({
                        "execucoes": self.sistema_integrado.dados_sistema.get("execucoes", 0),
                        "pares_processados": self.sistema_integrado.dados_sistema.get("pares_processados", 0),
                        "ordens_enviadas": self.sistema_integrado.dados_sistema.get("ordens_enviadas", 0),
                        "ultimo_update": datetime.now()
                    })
                    
                    # Sincroniza logs (√∫ltimos 50)
                    if self.sistema_integrado.logs:
                        logs_sistema = self.sistema_integrado.logs[-50:]
                        for log in logs_sistema:
                            if log not in self.logs:
                                self.logs.append(log)
                        
                        # Mant√©m limite de logs
                        if len(self.logs) > 1000:
                            self.logs = self.logs[-500:]
                
                # Aguarda 5 segundos para pr√≥xima sincroniza√ß√£o
                for i in range(5):
                    if not self.running:
                        break
                    time_module.sleep(1)
                    
            except Exception as e:
                self.log(f"‚ùå Erro na sincroniza√ß√£o: {str(e)}")
                time_module.sleep(10)
    
    def parar_sistema(self):
        """Para o sistema de trading - Vers√£o otimizada"""
        self.running = False
        
        if self.modo_otimizado and self.sistema_integrado:
            # Para sistema integrado
            self.sistema_integrado.parar_sistema()
            self.log("üõë Sistema integrado parado")
        
        self.log("üõë Sistema parado")
    
    def exportar_relatorio_excel(self) -> bytes:
        """Exporta relat√≥rio para Excel"""
        output = io.BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # Resumo geral
            resumo = pd.DataFrame([self.dados_sistema])
            resumo.to_excel(writer, sheet_name='Resumo', index=False)
            
            # Posi√ß√µes abertas
            if self.posicoes_abertas:
                pos_df = pd.DataFrame(self.posicoes_abertas)
                pos_df.to_excel(writer, sheet_name='Posi√ß√µes Abertas', index=False)
            
            # Sinais
            if self.sinais_ativos:
                sinais_df = pd.DataFrame(self.sinais_ativos)
                sinais_df.to_excel(writer, sheet_name='Sinais', index=False)
            
            # Equity hist√≥rico
            if self.equity_historico:
                equity_df = pd.DataFrame(self.equity_historico)
                equity_df.to_excel(writer, sheet_name='Equity Hist√≥rico', index=False)
            
            # Logs
            logs_df = pd.DataFrame({'Log': self.logs})
            logs_df.to_excel(writer, sheet_name='Logs', index=False)
        
        output.seek(0)
        return output.getvalue()

# Inicializa sistema global
if 'trading_system' not in st.session_state:
    st.session_state.trading_system = TradingSystemReal()

# Verifica√ß√£o de seguran√ßa - reconstr√≥i o objeto se necess√°rio
if not hasattr(st.session_state.trading_system, 'iniciar_sistema'):
    st.session_state.trading_system = TradingSystemReal()

def render_header():
    """Renderiza header principal com status das funcionalidades"""
    
    #col1, col2, col3, col4 = st.columns(4)
    #sistema = st.session_state.trading_system
    
    # For√ßa atualiza√ß√£o do status para garantir sincroniza√ß√£o
    #mt5_conectado = sistema.mt5_connected
    #sistema_rodando = sistema.running

    #with col1:
        #status_mt5 = "online" if mt5_conectado else "offline"
        #color_mt5 = "üü¢" if mt5_conectado else "üî¥"
        #st.markdown(f"""
        #**üîó Conex√£o MT5** 
        #**{color_mt5}   {status_mt5}**
        #""")
    
    #with col2:
        # Informa√ß√µes financeiras dependem do MT5 estar conectado
       # status_financeiro = "online" if mt5_conectado else "offline"
        #color_fin = "üü¢" if mt5_conectado else "üî¥"
        #st.markdown(f"""
        #**üí∞ Informa√ß√µes Financeiras** 
        #{color_fin} **{status_financeiro}**
        #""")
    
    #with col3:
        # Sinais dependem tanto do MT5 quanto do sistema estar rodando
        #sinais_online = mt5_conectado and sistema_rodando
        #status_sinais = "online" if sinais_online else "offline"
        #color_sinais = "üü¢" if sinais_online else "üî¥"
        #st.markdown(f"""
       # **üìä Sinais de Trading** 
       # {color_sinais} **{status_sinais}**
        #""")
    
   # with col4:
        # Relat√≥rios sempre online se MT5 conectado
       # status_relatorios = "online" if mt5_conectado else "offline"
       # color_rel = "üü¢" if mt5_conectado else "üî¥"
       # st.markdown(f"""
       # **üìã Relat√≥rios/Exporta√ß√£o** 
       # {color_rel} **{status_relatorios}**
       # """)
    
    # DEBUG INFO (remover em produ√ß√£o)
    #if st.checkbox("üîß Debug Status", value=False):
        #st.write(f"**Debug:** MT5={mt5_conectado}, Sistema={sistema_rodando}, Sinais={sinais_online}")
    
    st.markdown("---")
    
def render_sidebar():
    """Renderiza sidebar com configura√ß√µes"""
    st.sidebar.markdown("## ‚öôÔ∏è Configura√ß√µes")
    
    # INDICADOR DE MODO INTEGRADO
    #if SISTEMA_INTEGRADO_DISPONIVEL and st.session_state.trading_system.modo_otimizado:
        #st.sidebar.markdown("""
        #<div style="background: linear-gradient(45deg, #28a745, #20c997); 
                   # color: white; padding: 0.5rem; border-radius: 8px; 
                    #text-align: center; margin-bottom: 1rem; font-weight: bold;">
           ##</div>
       # """, unsafe_allow_html=True)
        
        # Status das threads quando sistema estiver rodando
        #if st.session_state.trading_system.running and st.session_state.trading_system.sistema_integrado:
            #sistema = st.session_state.trading_system.sistema_integrado
            #st.sidebar.markdown("**üßµ Status das Threads:**")
            
            #threads_status = [
                #("üìä Monitoramento", "Ativo" if sistema.running else "Inativo"),
                #("üîç Posi√ß√µes", "Ativo" if sistema.running else "Inativo"),
                #("üìà Break-Even", "Ativo" if sistema.running else "Inativo"),
                #("‚è∞ Ajustes Program.", "Ativo" if sistema.running else "Inativo")
            #]
            
            #for nome, status in threads_status:
                #cor = "üü¢" if status == "Ativo" else "üî¥"
                #st.sidebar.markdown(f"   {cor} {nome}: {status}", unsafe_allow_html=True)
            
            #st.sidebar.markdown("---")
   # else:
        #st.sidebar.markdown("""
        #<div style="background: #ffc107; color: #212529; padding: 0.5rem; 
                   # border-radius: 8px; text-align: center; margin-bottom: 1rem; font-weight: bold;">
            #‚ö†Ô∏è MODO B√ÅSICO
        #</div>
        #""", unsafe_allow_html=True)
    
    # CONTROLES DO SISTEMA - MOVIDO PARA O TOPO
    st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üéÆ Plataforma")
    
    # Interface de controle no mesmo formato MT5
    is_running = st.session_state.trading_system.running
    
    # Interface de controle compacta
    col_btn, col_status = st.sidebar.columns([1, 1])
    
    with col_btn:
        if is_running:
            # Quando rodando, bot√£o vira "Parar Sistema"
            if st.button("Desconectar", use_container_width=True, help="Clique para parar o sistema"):
                st.session_state.trading_system.parar_sistema()
                # Remove o st.success para evitar bot√£o piscante
                st.rerun()
        else:
            # Quando parado, bot√£o normal "Iniciar Sistema"
            if st.button("Conectar", use_container_width=True, help="Clique para iniciar o sistema"):
                # Usa configura√ß√£o tempor√°ria se ainda n√£o existe a final
                config_temp = getattr(st.session_state.trading_system, 'config_atual', {
                    'ativos_selecionados': [],
                    'timeframe': "1 dia",
                    'periodo_analise': 120,
                    'usar_multiplos_periodos': True,
                    'zscore_min': 2.0,
                    'zscore_max': 2.0,
                    'max_posicoes': 6,
                    'filtro_cointegra√ß√£o': True,
                    'filtro_r2': True,
                    'filtro_beta': True,
                    'filtro_zscore': True,
                    'r2_min': 0.5,
                    'intervalo_execucao': 60 
                })
                  # Debug: verifica se o m√©todo existe
                if hasattr(st.session_state.trading_system, 'iniciar_sistema'):
                    if st.session_state.trading_system.iniciar_sistema(config_temp):
                        # Remove o st.success para evitar bot√£o piscante
                        st.rerun()
                    else:
                        st.warning("Sistema j√° est√° rodando")
                else:
                    st.error("‚ùå M√©todo 'iniciar_sistema' n√£o encontrado! Reconstruindo objeto...")
                    st.session_state.trading_system = TradingSystemReal()
                    st.rerun()
    
    with col_status:
        if is_running:
            # Bot√£o verde quando sistema rodando
            st.markdown("""
            <div class="system-status-running">
                Conectado
            </div>
            """, unsafe_allow_html=True)
        else:
            # Bot√£o cinza quando sistema parado
            st.markdown("""
            <div class="system-status-stopped">
                Desconectado
            </div>
            """, unsafe_allow_html=True)
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # CONEX√ÉO MT5 - AGORA FICA ABAIXO DOS CONTROLES
    st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üîå Conex√£o MT5")
    
    # Verifica se j√° est√° conectado para minimizar a interface
    is_connected = st.session_state.trading_system.mt5_connected
    
    if not is_connected:
        # Mostra campos de login apenas se n√£o estiver conectado
        mt5_login = st.sidebar.number_input("Login", value=0, format="%d")
        mt5_password = st.sidebar.text_input("Senha", type="password")
        mt5_server = st.sidebar.text_input("Servidor", value="")
    else:
        # Usa valores salvos ou padr√£o quando conectado
        mt5_login = getattr(st.session_state.trading_system, 'last_login', 0)
        mt5_password = getattr(st.session_state.trading_system, 'last_password', "")
        mt5_server = getattr(st.session_state.trading_system, 'last_server', "")
    
    # Interface de conex√£o compacta
    col_btn, col_status = st.sidebar.columns([1, 1])
    
    with col_btn:
        if is_connected:
            # Quando conectado, bot√£o vira "Desconectar"
            if st.button("Desconectar", use_container_width=True, help="Clique para desconectar do MT5"):
                st.session_state.trading_system.mt5_connected = False
                # Limpa as credenciais salvas
                if hasattr(st.session_state.trading_system, 'last_login'):
                    delattr(st.session_state.trading_system, 'last_login')
                if hasattr(st.session_state.trading_system, 'last_password'):
                    delattr(st.session_state.trading_system, 'last_password')
                if hasattr(st.session_state.trading_system, 'last_server'):
                    delattr(st.session_state.trading_system, 'last_server')
                st.success("Desconectado!")
                st.rerun()  # Recarrega para mostrar campos novamente
        else:
            # Quando desconectado, bot√£o normal "Conectar"
            if st.button("Conectar", use_container_width=True, help="Clique para conectar ao MT5"):
                if st.session_state.trading_system.conectar_mt5(mt5_login, mt5_password, mt5_server):
                    # Salva as credenciais para pr√≥xima conex√£o
                    st.session_state.trading_system.last_login = mt5_login
                    st.session_state.trading_system.last_password = mt5_password
                    st.session_state.trading_system.last_server = mt5_server
                    st.success("Conectado!")
                    st.rerun()  # Recarrega para minimizar a interface
                else:                    st.error("‚ùå Falha na conex√£o")
    
    with col_status:
        if is_connected:
            # Bot√£o verde completo quando conectado
            st.markdown("""
            <div class="status-button-connected">
                Conectado
            </div>
            """, unsafe_allow_html=True)
        else:
            # Bot√£o vermelho completo quando desconectado
            st.markdown("""
            <div class="status-button-disconnected">
                Desconectado
            </div>            """, unsafe_allow_html=True)
    
    # Remove o bot√£o de configura√ß√£o separado (agora o desconectar faz essa fun√ß√£o)
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # Sele√ß√£o de Ativos
    st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üìä Ativos Monitorados")
    
    # Filtro por segmento
    segmentos_disponiveis = list(set(st.session_state.trading_system.segmentos.values()))
    segmentos_disponiveis.sort()  # Ordena alfabeticamente
    
    # Op√ß√£o de selecionar todos os segmentos (PADR√ÉO: MARCADO)
    selecionar_todos_segmentos = st.sidebar.checkbox("Selecionar Todos os Segmentos", value=True)
    
    if selecionar_todos_segmentos:
        segmentos_selecionados = segmentos_disponiveis
    else:
        segmentos_selecionados = st.sidebar.multiselect(
            "Segmentos", 
            segmentos_disponiveis,
            default=segmentos_disponiveis  # PRODU√á√ÉO: Todos os segmentos por padr√£o
        )
    
    # Ativos por segmento selecionado
    ativos_filtrados = [
        ativo for ativo, segmento in st.session_state.trading_system.segmentos.items()
        if segmento in segmentos_selecionados
    ]
    
    # Op√ß√£o de selecionar todos os ativos (PADR√ÉO: MARCADO)
    selecionar_todos_ativos = st.sidebar.checkbox("Selecionar Todos os Ativos", value=True)
    
    if selecionar_todos_ativos:
        ativos_selecionados = ativos_filtrados
    else:
        ativos_selecionados = st.sidebar.multiselect(
            "Ativos Espec√≠ficos",
            ativos_filtrados,
            default=ativos_filtrados if ativos_filtrados else []  # PRODU√á√ÉO: Todos por padr√£o
        )
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # Par√¢metros de Trading
    st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üéØ Par√¢metros de Trading")
    
    timeframe = st.sidebar.selectbox(
        "Timeframe",
        ["1 min", "5 min", "15 min", "30 min", "1 hora", "4 horas", "1 dia"],
        index=6
    )
    
    # Op√ß√£o para escolher entre per√≠odo √∫nico ou m√∫ltiplos per√≠odos
    usar_multiplos_periodos = st.sidebar.radio(
        "Estrat√©gia de An√°lise",
        options=["Per√≠odo √önico", "M√∫ltiplos Per√≠odos"],
        index=1,  # Default para m√∫ltiplos per√≠odos
        help="Per√≠odo √önico: usa apenas o per√≠odo selecionado abaixo. "
             "M√∫ltiplos Per√≠odos: (70, 100, 120, 140, 160, 180, 200, 220, 240, 250) para encontrar as melhores oportunidades."
    )
    
    # Mostra o slider de per√≠odo apenas se "Per√≠odo √önico" for selecionado
    if usar_multiplos_periodos == "Per√≠odo √önico":
        periodo_analise = st.sidebar.slider(
            "Per√≠odo de An√°lise", 
            50, 250, 120,  # Valor padr√£o mais balanceado
            help="Per√≠odo espec√≠fico para an√°lise quando usar estrat√©gia de per√≠odo √∫nico"
        )
    else:
        # Para m√∫ltiplos per√≠odos, usa um valor padr√£o (n√£o ser√° usado na pr√°tica)
        periodo_analise = 250  # Valor padr√£o para garantir dados suficientes
        st.sidebar.info("70, 100, 120, 140, 160, 180, 200, 220, 240, 250")
    
    zscore_threshold = st.sidebar.slider(
        "Limiar Z-Score", 
        0.5, 3.0, 2.0, 0.1,
        help="Limiar m√≠nimo para considerar sinais"
    )
    
    max_posicoes = st.sidebar.slider("M√°x. Posi√ß√µes Simult√¢neas", 1, 20, 6)
      # Filtros
    st.sidebar.markdown("**Filtros Avan√ßados:**")
    filtro_cointegra√ß√£o = st.sidebar.checkbox("Cointegra√ß√£o", value=True)
    filtro_r2 = st.sidebar.checkbox("R¬≤ M√≠nimo", value=True)
    filtro_beta = st.sidebar.checkbox("Beta M√°ximo", value=True)
    filtro_zscore = st.sidebar.checkbox("Z-Score Range", value=True)
    
    r2_min = st.sidebar.slider("R¬≤ M√≠nimo", 0.1, 0.9, 0.5, 0.05)
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
    
    # BOT√ïES DE UTILIDADE NO FINAL
    st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
    st.sidebar.markdown("### üîß Utilidades")
    
    if st.sidebar.button("üíæ Salvar Perfil"):
        st.sidebar.success("Perfil salvo!")
    
    if st.sidebar.button("üîÑ Reset Completo"):
        st.session_state.trading_system = TradingSystemReal()
        st.sidebar.success("Sistema resetado!")
    
    st.sidebar.markdown('</div>', unsafe_allow_html=True)
      # Atualiza a configura√ß√£o dos controles com os valores finais
    config_final = {
        'ativos_selecionados': ativos_selecionados,
        'timeframe': timeframe,
        'periodo_analise': periodo_analise,
        'usar_multiplos_periodos': usar_multiplos_periodos == "M√∫ltiplos Per√≠odos",
        'zscore_min': zscore_threshold,
        'zscore_max': zscore_threshold,
        'max_posicoes': max_posicoes,
        'filtro_cointegra√ß√£o': filtro_cointegra√ß√£o,
        'filtro_r2': filtro_r2,
        'filtro_beta': filtro_beta,
        'filtro_zscore': filtro_zscore,
        'r2_min': r2_min,
        'intervalo_execucao': 60 
    }
    
    # DEBUG: Log da configura√ß√£o que est√° sendo enviada
    sistema = st.session_state.trading_system
    #if hasattr(sistema, 'log'):
        #sistema.log(f"üîß DEBUG SIDEBAR: Total segmentos dispon√≠veis: {len(segmentos_disponiveis)}")
        #sistema.log(f"üîß DEBUG SIDEBAR: Segmentos selecionados: {len(segmentos_selecionados)}")
        #sistema.log(f"üîß DEBUG SIDEBAR: Ativos filtrados: {len(ativos_filtrados)}")
        #sistema.log(f"üîß DEBUG SIDEBAR: Ativos finais selecionados: {len(ativos_selecionados)}")
        #sistema.log(f"üîß DEBUG SIDEBAR: Lista de ativos: {ativos_selecionados[:5]}..." if len(ativos_selecionados) > 5 else f"üîß DEBUG SIDEBAR: Lista de ativos: {ativos_selecionados}")
    
    # Atualiza a configura√ß√£o dos controles no topo da sidebar
    if hasattr(st.session_state.trading_system, 'config_atual'):
        st.session_state.trading_system.config_atual = config_final
    
    return config_final

def render_status_cards():
    """Renderiza cart√µes de status"""
    sistema = st.session_state.trading_system
    dados = sistema.dados_sistema
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Pares Processados",
            f"{dados['pares_processados']:,}",
            delta=f"+{dados['execucoes']}"
        )
    
    with col2:
        st.metric(
            "Posi√ß√µes Abertas",
            dados['posicoes_abertas'],
            delta=None
        )
    
    with col3:
        equity_delta = dados['equity_atual'] - dados['saldo_inicial'] if dados['saldo_inicial'] > 0 else 0
        st.metric(
            "Equity Atual",
            f"R$ {dados['equity_atual']:,.2f}",
            delta=f"R$ {equity_delta:,.2f}"
        )
    
    with col4:
        lucro_cor = "normal" if dados['lucro_diario'] >= 0 else "inverse"
        st.metric(
            "Lucro/Preju√≠zo Di√°rio",
            f"R$ {dados['lucro_diario']:,.2f}",
            delta=f"{(dados['lucro_diario']/dados['saldo_inicial']*100) if dados['saldo_inicial'] > 0 else 0:.2f}%"
        )
    
    # Segunda linha de m√©tricas
    col5, col6, col7, col8 = st.columns(4)
    
    with col5:
        st.metric("Win Rate", f"{dados['win_rate']:.1f}%")
    
    with col6:
        st.metric("Sharpe Ratio", f"{dados['sharpe_ratio']:.2f}")
    
    with col7:
        st.metric("Drawdown M√°x.", f"{dados['drawdown_max']:.2f}%")
    
    with col8:
        ultimo_update = dados['ultimo_update'].strftime("%H:%M:%S") if dados['ultimo_update'] else "Nunca"
        st.metric("√öltima Atualiza√ß√£o", ultimo_update)
    
    # M√©tricas espec√≠ficas do sistema integrado (se dispon√≠vel)
    #if sistema.modo_otimizado and sistema.sistema_integrado and sistema.running:
        #st.markdown("---")
        #st.markdown("### üßµ M√©tricas do Sistema Integrado")
        
        #col_t1, col_t2, col_t3, col_t4 = st.columns(4)
        
        #with col_t1:
            #total_threads = 4  # Threads principais
            #st.metric("Threads Ativas", f"{total_threads}/4", delta="Threading ativo")
        
        #with col_t2:
            # Stops ajustados hoje
            #stops_ajustados = len(sistema.sistema_integrado.stops_ja_ajustados) if hasattr(sistema.sistema_integrado, 'stops_ja_ajustados') else 0
            #st.metric("Stops Ajustados", stops_ajustados, delta="Break-even")
        
        #with col_t3:
            # Ajustes executados
            #ajustes_exec = len(sistema.sistema_integrado.ajustes_executados_hoje) if hasattr(sistema.sistema_integrado, 'ajustes_executados_hoje') else 0
            #st.metric("Ajustes Program.", ajustes_exec, delta="15:10/15:20/16:01")
        
        #with col_t4:
            # Status do sistema integrado
            #status_integrado = "üü¢ ATIVO" if sistema.sistema_integrado.running else "üî¥ INATIVO"
            #st.metric("Sistema Core", status_integrado, delta="Multi-thread")

def render_equity_chart():
    """Renderiza gr√°fico de equity com dados reais do MT5"""
    sistema = st.session_state.trading_system
    
    # Indicador de status da funcionalidade
    col1, col2 = st.columns([3, 1])
    #with col1:
        #st.markdown("### üìà Curva de Equity em Tempo Real")
    with col2:
        if sistema.mt5_connected:
            st.markdown("‚úÖ **online**", help="Dados de equity obtidos em tempo real do MetaTrader 5")
            # NOVO: Bot√£o para for√ßar atualiza√ß√£o
            if st.button("üîÑ", help="For√ßa atualiza√ß√£o dos dados de equity"):
                sistema.equity_historico = []  # Limpa dados antigos
                try:
                    sistema.atualizar_account_info()
                    equity_dados_mt5 = obter_equity_historico_mt5(sistema)
                    if equity_dados_mt5:
                        sistema.equity_historico = equity_dados_mt5
                        sistema.log(f"üîÑ Gr√°fico atualizado: {len(equity_dados_mt5)} pontos carregados")
                        st.rerun()
                except Exception as e:
                    sistema.log(f"‚ùå Erro na atualiza√ß√£o: {str(e)}")
        else:
            st.markdown("üî¥ **offline**", help="MT5 desconectado - sem dados reais")
    
    # CORRE√á√ÉO: Se n√£o h√° dados no hist√≥rico mas MT5 est√° conectado, coleta dados agora
    if not sistema.equity_historico and sistema.mt5_connected:
        try:
            # For√ßa coleta de dados atuais do MT5
            sistema.atualizar_account_info()
            sistema.log("üìä Dados de equity coletados automaticamente para o gr√°fico")
        except Exception as e:
            sistema.log(f"‚ùå Erro ao coletar dados de equity: {str(e)}")
    
    # Verifica novamente ap√≥s tentar coletar
    if not sistema.equity_historico:
        if sistema.mt5_connected:
            # MELHORIA: Tenta obter dados hist√≥ricos do MT5 para popular o gr√°fico
            equity_dados_mt5 = obter_equity_historico_mt5(sistema)
            if equity_dados_mt5:
                sistema.equity_historico = equity_dados_mt5
                sistema.log(f"üìä {len(equity_dados_mt5)} pontos de equity carregados do hist√≥rico MT5")
            else:
                st.info("üìä Aguardando dados de equity... Execute o sistema para coletar dados.")
                # NOVO: Mostra dados atuais mesmo sem hist√≥rico
                try:
                    account_info = mt5.account_info()
                    if account_info:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Equity Atual", f"R$ {account_info.equity:,.2f}")
                        with col2:
                            st.metric("Balance Atual", f"R$ {account_info.balance:,.2f}")
                        with col3:
                            st.metric("Profit Atual", f"R$ {account_info.profit:+,.2f}")
                        st.info("üí° Use o bot√£o 'Atualizar' acima para carregar o gr√°fico completo")
                except:
                    pass
                return
        else:
            st.warning("üîå Conecte ao MT5 para visualizar curva de equity real")
            return
    
    df_equity = pd.DataFrame(sistema.equity_historico)
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df_equity['timestamp'],
        y=df_equity['equity'],
        mode='lines+markers',
        name='Equity (Real)',
        line=dict(color='#2980b9', width=2),
        marker=dict(size=4)
    ))
    
    fig.add_trace(go.Scatter(
        x=df_equity['timestamp'],
        y=df_equity['balance'],
        mode='lines',
        name='Balance (Real)',
        line=dict(color='#27ae60', width=1, dash='dash')
    ))
    
    fig.update_layout(
        title="üìà Curva de Equity",
        xaxis_title="Tempo",
        yaxis_title="Valor (R$)",
        hovermode='x unified',
        showlegend=True,
        height=400,
        template="plotly_white"
    )
    
    st.plotly_chart(fig, use_container_width=True)

def render_positions_table():
    """Renderiza tabela de posi√ß√µes abertas - FORMATO PROFISSIONAL"""
    sistema = st.session_state.trading_system
    posicoes = sistema.obter_posicoes_abertas()
    
    # Indicador de status da funcionalidade
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("### üíº Posi√ß√µes Detalhadas")
    with col2:
        if sistema.mt5_connected:
            st.markdown("‚úÖ **online**", help="Dados obtidos em tempo real do MetaTrader 5")
        else:
            st.markdown("üî¥ **offline**", help="MT5 desconectado - usando dados simulados")
    
    # Se n√£o h√° posi√ß√µes reais, cria dados de demonstra√ß√£o baseados nos sinais
    if not posicoes:
        if sistema.mt5_connected:
            st.info("üíº Nenhuma posi√ß√£o aberta no momento")
        else:
            st.warning("üîå Conecte ao MT5 para visualizar posi√ß√µes reais")
            
        # DEMO: Cria posi√ß√µes de exemplo se h√° dados dispon√≠veis
        if hasattr(sistema, 'tabela_linha_operacao') and not sistema.tabela_linha_operacao.empty:
            st.info("üìä Exibindo posi√ß√µes simuladas baseadas na an√°lise:")
            
            df_demo = sistema.tabela_linha_operacao.head(3).copy()  # Pega 3 primeiros
            
            posicoes_demo = []
            for i, row in df_demo.iterrows():
                dep = row.get('Dependente', 'ATIVO1')
                ind = row.get('Independente', 'ATIVO2')
                zscore = row.get('Z-Score', 0)
                preco_atual = row.get('preco_atual', 100.0)
                
                # Determina tipo baseado no Z-Score
                if zscore <= -1.5:
                    tipo = 'LONG'
                    preco_abertura = preco_atual * 0.995  # Comprou 0.5% abaixo
                    pl_valor = preco_atual - preco_abertura
                elif zscore >= 1.5:
                    tipo = 'SHORT'
                    preco_abertura = preco_atual * 1.005  # Vendeu 0.5% acima
                    pl_valor = preco_abertura - preco_atual
                else:
                    continue
                
                pl_percent = (pl_valor / preco_abertura * 100) if preco_abertura > 0 else 0
                
                pos_demo = {
                    'Par': f"{dep}/{ind}",
                    'Tipo': tipo,
                    'Volume': 1000 + (i * 500),  # Volume variado
                    'Pre√ßo Abertura': f"R$ {preco_abertura:.2f}",
                    'Pre√ßo Atual': f"R$ {preco_atual:.2f}",
                    'P&L (R$)': f"R$ {pl_valor:+.2f}",
                    'P&L (%)': f"{pl_percent:+.2f}%",
                    'Stop Loss': f"R$ {preco_abertura * 0.98:.2f}",
                    'Take Profit': f"R$ {preco_abertura * 1.05:.2f}",
                    'Tempo Aberto': f"{i+1}:30:00",  # Tempo simulado
                    'Setor': sistema.segmentos.get(dep, 'Outros')
                }
                posicoes_demo.append(pos_demo)
            
            if posicoes_demo:
                df_pos_demo = pd.DataFrame(posicoes_demo)
                
                # Aplica cores condicionais
                def color_pl(val):
                    if '+' in str(val):
                        return 'color: green; font-weight: bold'
                    elif '-' in str(val):
                        return 'color: red; font-weight: bold'
                    return ''
                
                def color_tipo(val):
                    if val == 'LONG':
                        return 'background-color: rgba(0, 255, 0, 0.1)'
                    elif val == 'SHORT':
                        return 'background-color: rgba(255, 0, 0, 0.1)'
                    return ''
                
                st.dataframe(
                    df_pos_demo.style.applymap(color_tipo, subset=['Tipo'])
                                    .applymap(color_pl, subset=['P&L (R$)', 'P&L (%)']),
                    use_container_width=True,
                    hide_index=True,
                    height=300
                )
                
                # M√©tricas resumidas
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    total_pl = sum([float(p['P&L (R$)'].replace('R$ ', '').replace('+', '')) for p in posicoes_demo])
                    st.metric("P&L Total", f"R$ {total_pl:+.2f}")
                with col2:
                    st.metric("Posi√ß√µes Abertas", len(posicoes_demo))
                with col3:
                    long_pos = len([p for p in posicoes_demo if p['Tipo'] == 'LONG'])
                    st.metric("Taxa de Acerto", f"{66.7:.1f}%")  # Simulado
                with col4:
                    st.metric("Tempo M√©dio", "4h 30m")  # Simulado
                    
        return
    
    # Processa posi√ß√µes reais do MT5
    df_pos = pd.DataFrame(posicoes)
    
    # Converte para formato profissional
    posicoes_formatted = []
    for _, pos in df_pos.iterrows():
        tipo = 'LONG' if pos.get('type', 0) == 0 else 'SHORT'  # 0=buy, 1=sell no MT5
        pl_value = pos.get('profit', 0)
        preco_abertura = pos.get('price_open', 0)
        preco_atual = pos.get('price_current', 0)
        
        pl_percent = (pl_value / (preco_abertura * pos.get('volume', 1))) * 100 if preco_abertura > 0 else 0
        
        # Calcula tempo aberto
        tempo_abertura = pos.get('time', datetime.now())
        if isinstance(tempo_abertura, (int, float)):
            tempo_abertura = datetime.fromtimestamp(tempo_abertura)
        
        tempo_decorrido = datetime.now() - tempo_abertura
        hours, remainder = divmod(tempo_decorrido.total_seconds(), 3600)
        minutes, _ = divmod(remainder, 60)
        tempo_str = f"{int(hours)}:{int(minutes):02d}:00"
        
        pos_data = {
            'Par': pos.get('symbol', 'N/A'),
            'Tipo': tipo,
            'Volume': f"{pos.get('volume', 0):,.0f}",
            'Pre√ßo Abertura': f"R$ {preco_abertura:.2f}",
            'Pre√ßo Atual': f"R$ {preco_atual:.2f}",
            'P&L (R$)': f"R$ {pl_value:+.2f}",
            'P&L (%)': f"{pl_percent:+.2f}%",
            'Stop Loss': f"R$ {pos.get('sl', 0):.2f}" if pos.get('sl', 0) > 0 else 'N/A',
            'Take Profit': f"R$ {pos.get('tp', 0):.2f}" if pos.get('tp', 0) > 0 else 'N/A',
            'Tempo Aberto': tempo_str,
            'Setor': sistema.segmentos.get(pos.get('symbol', ''), 'Outros')
        }
        posicoes_formatted.append(pos_data)
    
    if posicoes_formatted:
        df_display = pd.DataFrame(posicoes_formatted)
        
        # Aplica cores
        def color_pl(val):
            if '+' in str(val):
                return 'color: green; font-weight: bold'
            elif '-' in str(val):
                return 'color: red; font-weight: bold'
            return ''
        
        def color_tipo(val):
            if val == 'LONG':
                return 'background-color: rgba(0, 255, 0, 0.1)'
            elif val == 'SHORT':
                return 'background-color: rgba(255, 0, 0, 0.1)'
            return ''
        
        st.dataframe(
            df_display.style.applymap(color_tipo, subset=['Tipo'])
                           .applymap(color_pl, subset=['P&L (R$)', 'P&L (%)']),
            use_container_width=True,
            hide_index=True,
            height=400
        )
        
        # M√©tricas resumidas reais
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            total_pl = sum([pos.get('profit', 0) for pos in posicoes])
            st.metric("P&L Total", f"R$ {total_pl:+.2f}")
        with col2:
            st.metric("Pares ", len(posicoes))
        with col3:
            winners = len([p for p in posicoes if p.get('profit', 0) > 0])
            win_rate = (winners / len(posicoes) * 100) if posicoes else 0
            st.metric("Taxa de Acerto", f"{win_rate:.1f}%")
        with col4:
            tempo_medio = sum([
                (datetime.now() - (datetime.fromtimestamp(p.get('time', 0)) if isinstance(p.get('time'), (int, float)) else datetime.now())).total_seconds() / 3600
                for p in posicoes
            ]) / len(posicoes) if posicoes else 0
            st.metric("Tempo M√©dio", f"{tempo_medio:.1f}h")
    
    # Bot√µes de a√ß√£o se conectado
    if sistema.mt5_connected and posicoes:
        st.markdown("---")
        st.markdown("**üéõÔ∏è A√ß√µes R√°pidas:**")
        cols_actions = st.columns(min(len(posicoes), 4))  # M√°ximo 4 colunas
        
        for i, (col, pos) in enumerate(zip(cols_actions, posicoes[:4])):  # M√°ximo 4 bot√µes
            with col:
                symbol = pos.get('symbol', 'N/A')
                if st.button(f"‚ùå Fechar {symbol}", key=f"close_{pos.get('ticket', i)}"):
                    if sistema.fechar_posicao(pos.get('ticket')):
                        st.success(f"Posi√ß√£o {symbol} fechada!")
                        st.rerun()
                    else:
                        st.error("Erro ao fechar posi√ß√£o")

def render_signals_table():
    """Renderiza tabela de sinais de trading com an√°lise real - FORMATO PROFISSIONAL"""
    sistema = st.session_state.trading_system
    
    # Indicador de status da funcionalidade
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("### üì° Sinais de Trading Ativos")
    
    with col2:
        if sistema.mt5_connected:
            st.markdown("‚úÖ **REAL**", help="Dados obtidos em tempo real do MetaTrader 5")
        else:
            st.markdown("üî¥ **OFFLINE**", help="MT5 desconectado - usando dados simulados")
    
    # PRIORIDADE 1: Verifica sinais_ativos (dados processados)
    if hasattr(sistema, 'sinais_ativos') and sistema.sinais_ativos:
        df_sinais = pd.DataFrame(sistema.sinais_ativos)
        
        # Converte para formato profissional
        sinais_formatted = []
        for _, row in df_sinais.iterrows():
            tipo_sinal = 'LONG' if row.get('sinal') == 'COMPRA' else 'SHORT'
            preco_atual = row.get('preco_atual', 100.0)
            preco_entrada = row.get('preco_entrada', preco_atual)
            
            # Calcula P&L estimado
            if tipo_sinal == 'LONG':
                pl_value = preco_atual - preco_entrada
            else:
                pl_value = preco_entrada - preco_atual
                
            pl_percent = (pl_value / preco_entrada * 100) if preco_entrada > 0 else 0
            
            sinal_data = {
                'Par': row.get('par', 'N/A'),
                'Tipo': tipo_sinal,
                'Volume': '1.000',
                'Pre√ßo Abertura': f"R$ {preco_entrada:.2f}",
                'Pre√ßo Atual': f"R$ {preco_atual:.2f}",
                'P&L (R$)': f"R$ {pl_value:+.2f}",
                'P&L (%)': f"{pl_percent:+.2f}%",
                'Stop Loss': f"R$ {preco_entrada * 0.98:.2f}",
                'Take Profit': f"R$ {preco_entrada * 1.05:.2f}",
                'Tempo Aberto': '0:00:00',
                'Setor': row.get('segmento', 'Outros')
            }
            sinais_formatted.append(sinal_data)
        
        if sinais_formatted:
            df_display = pd.DataFrame(sinais_formatted)
            
            # M√©tricas resumidas no estilo da imagem
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                total_pl = sum([float(s['P&L (R$)'].replace('R$ ', '').replace('+', '')) for s in sinais_formatted])
                st.metric("P&L Total", f"R$ {total_pl:+.2f}")
            with col2:
                st.metric("Posi√ß√µes Abertas", len(sinais_formatted))
            with col3:
                winners = len([s for s in sinais_formatted if '+' in s['P&L (R$)']])
                win_rate = (winners / len(sinais_formatted) * 100) if sinais_formatted else 0
                st.metric("Taxa de Acerto", f"{win_rate:.1f}%")
            with col4:
                st.metric("Tempo M√©dio", "4h 30m")
            
            # Aplica cores
            def color_pl(val):
                if '+' in str(val):
                    return 'color: green; font-weight: bold'
                elif '-' in str(val):
                    return 'color: red; font-weight: bold'
                return ''
            
            def color_tipo(val):
                if val == 'LONG':
                    return 'background-color: rgba(0, 255, 0, 0.1)'
                elif val == 'SHORT':
                    return 'background-color: rgba(255, 0, 0, 0.1)'
                return ''
            
            st.dataframe(
                df_display.style.applymap(color_tipo, subset=['Tipo'])
                               .applymap(color_pl, subset=['P&L (R$)', 'P&L (%)']),
                use_container_width=True,
                hide_index=True,
                height=400
            )
            return
    
    # PRIORIDADE 2: Verifica tabela_linha_operacao (primeira sele√ß√£o)
    if hasattr(sistema, 'tabela_linha_operacao') and not sistema.tabela_linha_operacao.empty:
        st.info("üìä Exibindo sinais da primeira sele√ß√£o...")
        
        df_primeira = sistema.tabela_linha_operacao.copy()
        
        # Converte para formato profissional
        sinais_formatted = []
        for _, row in df_primeira.iterrows():
            zscore = row.get('Z-Score', 0)
            r2 = row.get('r2', 0)
            preco_atual = row.get('preco_atual', 100.0)
            
            # Determina tipo baseado no Z-Score
            if zscore <= -1.5:
                tipo_sinal = 'LONG'
                pl_simulado = preco_atual * 0.01  # 1% ganho simulado
            elif zscore >= 1.5:
                tipo_sinal = 'SHORT'
                pl_simulado = preco_atual * 0.008  # 0.8% ganho simulado
            else:
                continue  # Pula sinais neutros
            
            sinal_data = {
                'Par': f"{row.get('Dependente', 'N/A')}/{row.get('Independente', 'N/A')}",
                'Tipo': tipo_sinal,
                'Volume': '1.000',
                'Pre√ßo Abertura': f"R$ {preco_atual:.2f}",
                'Pre√ßo Atual': f"R$ {preco_atual:.2f}",
                'P&L (R$)': f"R$ {pl_simulado:+.2f}",
                'P&L (%)': f"{(pl_simulado/preco_atual*100):+.2f}%",
                'Stop Loss': f"R$ {preco_atual * 0.98:.2f}",
                'Take Profit': f"R$ {preco_atual * 1.05:.2f}",
                'Tempo Aberto': '0:00:00',
                'Setor': sistema.segmentos.get(row.get('Dependente', ''), 'Outros')
            }
            sinais_formatted.append(sinal_data)
        
        if sinais_formatted:
            df_display = pd.DataFrame(sinais_formatted)
            
            # M√©tricas resumidas no estilo da imagem
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                total_pl = sum([float(s['P&L (R$)'].replace('R$ ', '').replace('+', '')) for s in sinais_formatted])
                st.metric("P&L Total", f"R$ {total_pl:+.2f}")
            with col2:
                st.metric("Posi√ß√µes Abertas", len(sinais_formatted))
            with col3:
                long_count = len([s for s in sinais_formatted if s['Tipo'] == 'LONG'])
                win_rate = 66.7  # Taxa simulada
                st.metric("Taxa de Acerto", f"{win_rate:.1f}%")
            with col4:
                st.metric("Tempo M√©dio", "4h 30m")
            
            # Aplica cores
            def color_pl(val):
                if '+' in str(val):
                    return 'color: green; font-weight: bold'
                elif '-' in str(val):
                    return 'color: red; font-weight: bold'
                return ''
            
            def color_tipo(val):
                if val == 'LONG':
                    return 'background-color: rgba(0, 255, 0, 0.1)'
                elif val == 'SHORT':
                    return 'background-color: rgba(255, 0, 0, 0.1)'
                return ''
            
            st.dataframe(
                df_display.style.applymap(color_tipo, subset=['Tipo'])
                               .applymap(color_pl, subset=['P&L (R$)', 'P&L (%)']),
                use_container_width=True,
                hide_index=True,
                height=400
            )
            return
      # FALLBACK: Nenhum dado dispon√≠vel
    if sistema.mt5_connected:
        st.info("üì° Aguardando an√°lise de sinais... Inicie o sistema para executar an√°lises reais.")
    else:
        st.warning("üîå Conecte ao MT5 para executar an√°lises reais de sinais de trading")
    
    with st.expander("‚ÑπÔ∏è Sobre a An√°lise Real"):
        st.markdown("""
        **üî¨ Sistema de An√°lise Integrado:**
        - ‚úÖ **Dados hist√≥ricos reais** obtidos via MT5
        - ‚úÖ **C√°lculo de Z-Score** baseado em regress√£o linear
        - ‚úÖ **Filtros de qualidade** (R¬≤, Beta, Cointegra√ß√£o)
        - ‚úÖ **Teste de estacionariedade** (ADF)
        - ‚úÖ **An√°lise de pares** automatizada
        """)

def render_profit_distribution():
    """Renderiza distribui√ß√£o de lucros/preju√≠zos com dados reais do MT5"""
    sistema = st.session_state.trading_system
    
    # Indicador de status da funcionalidade
    col1, col2 = st.columns([3, 1])
    #with col1:
        #st.markdown("### üìä Distribui√ß√£o de Resultados por Trade")
    with col2:
        if sistema.mt5_connected:
            st.markdown("‚úÖ **online**", help="Dados de distribui√ß√£o obtidos do hist√≥rico real de trades do MT5")
        else:
            st.markdown("üî¥ **offline**", help="MT5 desconectado - usando dados de demonstra√ß√£o")
    
    # Busca dados reais se conectado ao MT5
    if sistema.mt5_connected:
        try:
            # Busca hist√≥rico dos √∫ltimos  30 dias
            data_inicio = datetime.now() - timedelta(days=30)
            data_fim = datetime.now()
            
            trades_reais = sistema.obter_historico_trades_real(data_inicio, data_fim)
            
            if trades_reais and len(trades_reais) > 0:
                # Extrai os lucros dos trades reais
                lucros_reais = [trade['Lucro'] for trade in trades_reais if 'Lucro' in trade]
                
                if lucros_reais and len(lucros_reais) > 0:  # M√≠nimo de 5 trades para an√°lise
                    fig = go.Figure()
                    
                    fig.add_trace(go.Histogram(
                        x=lucros_reais,
                        nbinsx=min(20, len(lucros_reais)//2),
                        name="Distribui√ß√£o P/L (Real)",
                        marker_color='#2980b9',
                        opacity=0.7
                    ))
                    
                    # Adiciona linhas de threshold
                    fig.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="Break Even")
                    fig.add_vline(x=np.mean(lucros_reais), line_dash="dash", line_color="green", annotation_text="M√©dia")
                    
                    # Estat√≠sticas dos dados reais
                    trades_lucrativos = len([l for l in lucros_reais if l > 0])
                    win_rate = (trades_lucrativos / len(lucros_reais)) * 100
                    
                    fig.update_layout(
                        title=f"üìä Distribui√ß√£o de Resultados por ({len(lucros_reais)} trades)",
                        xaxis_title="Lucro/Preju√≠zo (R$)",
                        yaxis_title="Frequ√™ncia",
                        height=400,
                        template="plotly_white"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Exibe m√©tricas dos dados reais
                    #col1, col2, col3, col4 = st.columns(4)
                    
                    #with col1:
                        #st.metric("Total de Trades", len(lucros_reais))
                    
                    #with col2:
                        #st.metric("Win Rate", f"{win_rate:.1f}%")
                    
                    #with col3:
                        #resultado_total = sum(lucros_reais)
                        #st.metric("Resultado Total", f"R$ {resultado_total:,.2f}")
                    
                    #with col4:
                        #resultado_medio = np.mean(lucros_reais)
                        #st.metric("Resultado M√©dio", f"R$ {resultado_medio:.2f}")
                    
                    #st.success(f"‚úÖ An√°lise baseada em {len(lucros_reais)} trades reais dos √∫ltimos 30 dias")
                    return
                else:
                    st.info("üìä Poucos trades encontrados para an√°lise estat√≠stica")
            else:
                st.info("üìä Nenhum trade encontrado nos √∫ltimos 30 dias")
                
        except Exception as e:
            sistema.log(f"‚ùå Erro ao buscar dados reais: {str(e)}")
            st.error(f"Erro ao buscar dados reais: {str(e)}")
    
    # Fallback para dados simulados se n√£o h√° dados reais
    st.warning("üîå Conecte ao MT5 para visualizar distribui√ß√£o dos resultados")
    
    # Simula dados de trades para demonstra√ß√£o
    #np.random.seed(42)
    #trades_results = np.random.normal(50, 200, 100)  # M√©dia R$ 50, desvio R$ 200
    
    #fig = go.Figure()
    
    #fig.add_trace(go.Histogram(
        #x=trades_results,
        #nbinsx=20,
        #name="Distribui√ß√£o P/L (Demo)",
        #marker_color='lightblue',
        #opacity=0.7
    #))
    
    # Adiciona linhas de threshold
    #fig.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="Break Even")
    #fig.add_vline(x=np.mean(trades_results), line_dash="dash", line_color="green", annotation_text="M√©dia")
    
    #fig.update_layout(
        #title="üìä Distribui√ß√£o de Resultados - Simula√ß√£o Demo",
        #xaxis_title="Lucro/Preju√≠zo (R$)",
        #yaxis_title="Frequ√™ncia",
        #height=400,
        #template="plotly_white"
    #)
    
    #st.plotly_chart(fig, use_container_width=True)
    
    #st.info("üîß **Conecte ao MT5 para visualizar distribui√ß√£o real de resultados**")

def render_trade_history():
    """Renderiza hist√≥rico de trades com dados reais do MT5"""
    sistema = st.session_state.trading_system
    
    # Indicador de status da funcionalidade
    col1, col2 = st.columns([3, 1])
    #with col1:
        #st.markdown("### üìã Hist√≥rico de Trades")
    with col2:
        if sistema.mt5_connected:
            st.markdown("‚úÖ **REAL**", help="Hist√≥rico obtido em tempo real do MetaTrader 5")
        else:
            st.markdown("üî¥ **OFFLINE**", help="MT5 desconectado - usando dados de demonstra√ß√£o")
    
    # Filtros de per√≠odo
    col1, col2, col3 = st.columns(3)
    
    with col1:
        data_inicio = st.date_input("Data In√≠cio", value=datetime.now().date() - timedelta(days=30))
    
    with col2:
        data_fim = st.date_input("Data Fim", value=datetime.now().date())
    
    with col3:
        filtro_resultado = st.selectbox("Resultado", ["Todos", "Lucro", "Preju√≠zo"])
    
    # Busca dados reais se conectado ao MT5
    if sistema.mt5_connected:
        try:
            # Converte datas para datetime
            dt_inicio = datetime.combine(data_inicio, time.min)
            dt_fim = datetime.combine(data_fim, time.max)
            
            # Busca trades reais do MT5
            trades_reais = sistema.obter_historico_trades_real(dt_inicio, dt_fim)
            
            if trades_reais and len(trades_reais) > 0:
                df_trades = pd.DataFrame(trades_reais)
                
                # Aplica filtros
                if filtro_resultado == "Lucro":
                    df_trades = df_trades[df_trades['Lucro'] > 0]
                elif filtro_resultado == "Preju√≠zo":
                    df_trades = df_trades[df_trades['Lucro'] < 0]
                
                # Formata colunas para exibi√ß√£o
                df_display = df_trades.copy()
                if not df_display.empty:
                    # Formata data
                    df_display['Data'] = df_display['Data'].dt.strftime('%d/%m/%Y %H:%M')
                    
                    # Formata valores monet√°rios
                    df_display['Pre√ßo'] = df_display['Pre√ßo'].apply(lambda x: f"R$ {x:.2f}")
                    df_display['Lucro'] = df_display['Lucro'].apply(lambda x: f"R$ {x:.2f}")
                    if 'Comiss√£o' in df_display.columns:
                        df_display['Comiss√£o'] = df_display['Comiss√£o'].apply(lambda x: f"R$ {x:.2f}")
                    if 'Swap' in df_display.columns:
                        df_display['Swap'] = df_display['Swap'].apply(lambda x: f"R$ {x:.2f}")
                    
                    # Seleciona colunas relevantes para exibi√ß√£o
                    cols_exibir = ['Ticket', 'Par', 'Tipo', 'Data', 'Volume', 'Pre√ßo', 'Lucro']
                    if 'Comiss√£o' in df_display.columns:
                        cols_exibir.append('Comiss√£o')
                    if 'Coment√°rio' in df_display.columns:
                        cols_exibir.append('Coment√°rio')
                    
                    df_display = df_display[cols_exibir]
                    
                    # ESTAT√çSTICAS PRIMEIRO - Calcula e exibe estat√≠sticas reais ANTES da tabela
                    estatisticas = sistema.calcular_estatisticas_performance_real(trades_reais)
                    
                    #st.markdown("### üìä Estat√≠sticas do Per√≠odo (Dados Reais)")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Total Trades", estatisticas['total_trades'])
                    
                    with col2:
                        st.metric("Win Rate", f"{estatisticas['win_rate']:.1f}%")
                    
                    with col3:
                        st.metric("Resultado Total", f"R$ {estatisticas['resultado_total']:,.2f}")
                    
                    with col4:
                        st.metric("Resultado M√©dio", f"R$ {estatisticas['resultado_medio']:.2f}")
                    
                    # Segunda linha de estat√≠sticas
                    col5, col6, col7, col8 = st.columns(4)
                    
                    with col5:
                        st.metric("Melhor Trade", f"R$ {estatisticas['melhor_trade']:,.2f}")
                    
                    with col6:
                        st.metric("Pior Trade", f"R$ {estatisticas['pior_trade']:,.2f}")
                    
                    with col7:
                        st.metric("Profit Factor", f"{estatisticas['profit_factor']:.2f}")
                    
                    with col8:
                        st.metric("Max Drawdown", f"{estatisticas['max_drawdown']:.2f}%")
                    
                    #st.success(f"‚úÖ Estat√≠sticas baseadas em {len(trades_reais)} trades reais do MT5")
                    
                    st.markdown("---")
                    
                    # TABELA DEPOIS - Exibe tabela AP√ìS as estat√≠sticas
                    #st.markdown("### üìã Detalhamento dos Trades")
                    st.dataframe(
                        df_display,
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    #st.success(f"‚úÖ Estat√≠sticas baseadas em {len(trades_reais)} trades reais do MT5")
                    return
                else:
                    st.info(f"üìä Nenhum trade encontrado no per√≠odo com filtro '{filtro_resultado}'")
                    return
            else:
                st.info("üìä Nenhum trade encontrado no per√≠odo selecionado")
                return
                
        except Exception as e:
            sistema.log(f"‚ùå Erro ao buscar hist√≥rico real: {str(e)}")
            st.error(f"Erro ao buscar dados reais: {str(e)}")
    
    # Fallback para dados simulados se n√£o h√° conex√£o MT5
    st.warning("üìä MT5 desconectado - usando dados simulados para demonstra√ß√£o")
    
    # Simula dados para demonstra√ß√£o
    trades_simulados = []
    np.random.seed(42)
    for i in range(50):
        resultado = np.random.normal(50, 200)
        trades_simulados.append({
            'Ticket': f"12345{i:02d}",
            'Par': np.random.choice(['PETR4', 'VALE3', 'ITUB4', 'BBDC4']),
            'Tipo': np.random.choice(['COMPRA', 'VENDA']),
            'Data': (datetime.now() - timedelta(days=np.random.randint(1, 30))).strftime('%d/%m/%Y %H:%M'),
            'Volume': round(np.random.uniform(100, 1000), 0),
            'Pre√ßo': f"R$ {np.random.uniform(20, 100):.2f}",
            'Lucro': f"R$ {resultado:.2f}",
            'Coment√°rio': 'Trade simulado'
        })
    
    df_trades = pd.DataFrame(trades_simulados)
    
    # Aplica filtros aos dados simulados
    if filtro_resultado == "Lucro":
        df_trades = df_trades[df_trades['Lucro'].str.replace('R$ ', '').str.replace(',', '').astype(float) > 0]
    elif filtro_resultado == "Preju√≠zo":
        df_trades = df_trades[df_trades['Lucro'].str.replace('R$ ', '').str.replace(',', '').astype(float) < 0]
    
    # ESTAT√çSTICAS PRIMEIRO - Estat√≠sticas simuladas ANTES da tabela
    #if not df_trades.empty:
        #st.markdown("### üìä Estat√≠sticas do Per√≠odo (Dados Simulados)")
        #col1, col2, col3, col4 = st.columns(4)
        
        #with col1:
            #st.metric("Total Trades", len(df_trades))
        
        #with col2:
            # Converte lucros para float para calcular win rate
            #lucros_float = df_trades['Lucro'].str.replace('R$ ', '').str.replace(',', '').astype(float)
            #trades_lucro = len(lucros_float[lucros_float > 0])
            #win_rate = (trades_lucro / len(df_trades)) * 100
            #st.metric("Win Rate", f"{win_rate:.1f}%")
        
        #with col3:
            #resultado_total = lucros_float.sum()
            #st.metric("Resultado Total", f"R$ {resultado_total:,.2f}")
        
        #with col4:
            #resultado_medio = lucros_float.mean()
            #st.metric("Resultado M√©dio", f"R$ {resultado_medio:.2f}")
        
        #st.info("üîß **Conecte ao MT5 para visualizar estat√≠sticas reais de trades**")
        
        #st.markdown("---")
        
        # TABELA DEPOIS - Tabela simulada AP√ìS as estat√≠sticas
        #st.markdown("### üìã Detalhamento dos Trades (Simulado)")
        #st.dataframe(df_trades, use_container_width=True, hide_index=True)

def render_logs():
    """Renderiza logs do sistema"""
    sistema = st.session_state.trading_system
    
    #st.markdown("### üìù Log de Eventos do Sistema")
    
    # Container com scroll para logs
    if sistema.logs:
        logs_text = "\n".join(sistema.logs[-50:])  # √öltimos 50 logs
        st.text_area(
            "Logs",
            value=logs_text,
            height=300,
            disabled=True,
            label_visibility="collapsed"
        )
    else:
        st.info("Nenhum log dispon√≠vel ainda")
    
    # Bot√£o para limpar logs
    if st.button("üóëÔ∏è Limpar Logs"):
        sistema.logs.clear()
        st.rerun()

def render_export_section():
    """Renderiza se√ß√£o de exporta√ß√£o"""
    #st.markdown("### üì§ Exporta√ß√£o de Relat√≥rios")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Exportar Excel", use_container_width=True):
            try:
                excel_data = st.session_state.trading_system.exportar_relatorio_excel()
                st.download_button(
                    label="üíæ Download Excel",
                    data=excel_data,
                    file_name=f"relatorio_trading_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            except Exception as e:
                st.error(f"Erro ao gerar Excel: {str(e)}")
    
    with col2:
        if st.button("üìã Relat√≥rio PDF", use_container_width=True):
            st.info("Funcionalidade PDF em desenvolvimento")
    
    with col3:
        if st.button("üìà Relat√≥rio Di√°rio", use_container_width=True):
            st.info("Funcionalidade de relat√≥rio di√°rio em desenvolvimento")

def render_segunda_selecao():
    """Renderiza aba com dados detalhados da segunda sele√ß√£o - FORMATO PROFISSIONAL"""
    #st.markdown("### üéØ Segunda Sele√ß√£o - An√°lise Refinada")
    
    sistema = st.session_state.trading_system
    
    # DEBUG: Sempre mostra estado atual dos dados
    with st.expander("üîç DEBUG: Estado Atual dos Dados (Sempre Vis√≠vel)"):
        st.write("**üìä Verificando todas as fontes de dados:**")
        
        # Verifica sinais_ativos
        if hasattr(sistema, 'sinais_ativos'):
            sinais_count = len(sistema.sinais_ativos) if sistema.sinais_ativos else 0
            st.write(f"- `sinais_ativos`: {sinais_count} itens")
            if sistema.sinais_ativos:
                st.write("  **Primeiros 3 exemplos:**")
                for i, sinal in enumerate(sistema.sinais_ativos[:3]):
                    st.write(f"    {i+1}. {sinal}")
        else:
            st.write("- `sinais_ativos`: ‚ùå Atributo n√£o existe")
        
        # Verifica tabela_linha_operacao01
        if hasattr(sistema, 'tabela_linha_operacao01'):
            if isinstance(sistema.tabela_linha_operacao01, pd.DataFrame):
                st.write(f"- `tabela_linha_operacao01`: {len(sistema.tabela_linha_operacao01)} linhas")
                if not sistema.tabela_linha_operacao01.empty:
                    st.write("  **Colunas:**", list(sistema.tabela_linha_operacao01.columns))
            else:
                st.write(f"- `tabela_linha_operacao01`: {type(sistema.tabela_linha_operacao01)}")
        else:
            st.write("- `tabela_linha_operacao01`: ‚ùå Atributo n√£o existe")
        
        # Verifica tabela_linha_operacao
        if hasattr(sistema, 'tabela_linha_operacao'):
            if isinstance(sistema.tabela_linha_operacao, pd.DataFrame):
                st.write(f"- `tabela_linha_operacao`: {len(sistema.tabela_linha_operacao)} linhas")
                if not sistema.tabela_linha_operacao.empty:
                    extremos = len(sistema.tabela_linha_operacao[sistema.tabela_linha_operacao['Z-Score'].abs() >= 1.5])
                    st.write(f"  **Z-Score extremo (‚â•1.5):** {extremos} pares")
            else:
                st.write(f"- `tabela_linha_operacao`: {type(sistema.tabela_linha_operacao)}")
        else:
            st.write("- `tabela_linha_operacao`: ‚ùå Atributo n√£o existe")
    
    # CORRE√á√ÉO: Verifica PRIMEIRA os sinais_ativos (dados processados da segunda sele√ß√£o)
    df_segunda = None
    source_info = ""
    
    # PRIORIDADE 1: sinais_ativos (dados j√° processados da segunda sele√ß√£o)
    if hasattr(sistema, 'sinais_ativos') and sistema.sinais_ativos:
        #st.info(f"üéØ Encontrados {len(sistema.sinais_ativos)} sinais em sinais_ativos")
        
        # Converte sinais_ativos para DataFrame para exibi√ß√£o
        sinais_data = []
        for sinal in sistema.sinais_ativos:
            # Extrai par (pode estar em formato "PAR1/PAR2" ou s√≥ "PAR1")
            par_original = sinal.get('par', '')
            if '/' in par_original:
                dependente = par_original.split('/')[0]
                independente = par_original.split('/')[1]
            else:
                dependente = par_original
                independente = 'INDEX'  # Fallback
            
            sinais_data.append({
                'Dependente': dependente,
                'Independente': independente,
                'Z-Score': sinal.get('zscore', sinal.get('Z-Score', 0)),
                'r2': sinal.get('r2', 0.7),  # Valor padr√£o se n√£o existir
                'preco_atual': sinal.get('preco_atual', 100),
                'Preco_Entrada_Final': sinal.get('preco_entrada', sinal.get('preco_atual', 100)),
                'sinal': sinal.get('sinal', 'NEUTRO'),
                'beta_rotation': sinal.get('beta_rotation', 0),
                'beta_rotation_mean': sinal.get('beta_rotation_mean', 0),
                'status': sinal.get('status', 'PROCESSADO')
            })
        
        if sinais_data:
            df_segunda = pd.DataFrame(sinais_data)
            source_info = f"üèÜ {len(df_segunda)} sinais da segunda sele√ß√£o (DADOS REAIS PROCESSADOS)"
            #st.success(source_info)
    
    # PRIORIDADE 2: tabela_linha_operacao01 (segunda sele√ß√£o salva)
    elif hasattr(sistema, 'tabela_linha_operacao01') and not sistema.tabela_linha_operacao01.empty:
        df_segunda = sistema.tabela_linha_operacao01.copy()
        source_info = f"üèÜ {len(df_segunda)} pares da tabela de segunda sele√ß√£o (DADOS SALVOS)"
        st.success(source_info)
    
    # PRIORIDADE 3: tabela_linha_operacao (primeira sele√ß√£o filtrada)
    elif hasattr(sistema, 'tabela_linha_operacao') and not sistema.tabela_linha_operacao.empty:
        df_primeira = sistema.tabela_linha_operacao.copy()
        # Filtra apenas pares com Z-Score extremo (simula segunda sele√ß√£o)
        df_segunda = df_primeira[df_primeira['Z-Score'].abs() >= 1.5].copy()
        if not df_segunda.empty:
            source_info = f"üìä {len(df_segunda)} pares filtrados da primeira sele√ß√£o (SIMULA√á√ÉO)"
            st.info(source_info)
        else:
            st.warning("‚ö†Ô∏è Nenhum par atende aos crit√©rios de Z-Score extremo (‚â•1.5 ou ‚â§-1.5)")
            return    
    # FALLBACK: Sem dados
    else:
        st.warning("‚ö†Ô∏è Nenhum dado da segunda sele√ß√£o dispon√≠vel")
        st.info("üí° Execute a an√°lise completa para gerar dados da segunda sele√ß√£o")
        
        with st.expander("‚ÑπÔ∏è Sobre a Segunda Sele√ß√£o"):
            st.markdown("""
            **üéØ Crit√©rios da Segunda Sele√ß√£o:**
            - ‚úÖ **Z-Score >= 2.0** ou **Z-Score <= -2.0**
            - ‚úÖ **Beta rotation > m√©dia** (para venda) ou **< m√©dia** (para compra)
            - ‚úÖ **R¬≤ m√≠nimo** para garantir correla√ß√£o
            - ‚úÖ **Teste de cointegra√ß√£o** (ADF p-value)
            - ‚úÖ **Filtros de spread** e diferen√ßa de pre√ßo
            """)
        return
    
    # PROCESSAMENTO DOS DADOS DA SEGUNDA SELE√á√ÉO
    if df_segunda is not None and not df_segunda.empty:
        
        # M√©tricas resumidas no estilo da imagem
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # Calcula P&L total simulado baseado em Z-Score
            total_pl = 0
            for _, row in df_segunda.iterrows():
                zscore = row.get('Z-Score', 0)
                preco_atual = row.get('preco_atual', 100)
                if zscore <= -1.5:  # LONG
                    total_pl += preco_atual * 0.015  # 1.5% ganho simulado
                elif zscore >= 1.5:  # SHORT
                    total_pl += preco_atual * 0.012  # 1.2% ganho simulado
            st.metric("P&L Total", f"R$ +{total_pl:.2f}")
        
        with col2:
            st.metric("Posi√ß√µes Abertas", len(df_segunda))
        
        with col3:
            # Taxa de acerto baseada em R¬≤ m√©dio
            r2_medio = df_segunda['r2'].mean() if 'r2' in df_segunda.columns else 0.65
            taxa_acerto = min(95, max(50, r2_medio * 100))
            st.metric("Taxa de Acerto", f"{taxa_acerto:.1f}%")
        
        with col4:
            # Tempo m√©dio simulado baseado na volatilidade
            tempo_medio = "4h 30m" if len(df_segunda) <= 5 else "3h 15m"
            st.metric("Tempo M√©dio", tempo_medio)
        
        st.markdown("---")
        
        # Converte dados para formato profissional da tabela
        posicoes_segunda = []
        for i, (_, row) in enumerate(df_segunda.iterrows()):
            dep = row.get('Dependente', 'N/A')
            ind = row.get('Independente', 'N/A')
            zscore = row.get('Z-Score', 0)
            r2 = row.get('r2', 0)
            preco_atual = row.get('preco_atual', 100 + i*10)  # Pre√ßos variados
            preco_entrada = row.get('Preco_Entrada_Final', preco_atual * 0.998)  # Entrada ligeiramente melhor
            
            # Determina tipo baseado no Z-Score
            if zscore <= -1.5:
                tipo = 'LONG'
                # Simula ganho baseado no Z-Score
                pl_estimado = abs(zscore) * preco_atual * 0.008  # Ganho proporcional
            elif zscore >= 1.5:
                tipo = 'SHORT'
                # Simula ganho baseado no Z-Score
                pl_estimado = zscore * preco_atual * 0.006  # Ganho proporcional
            else:
                tipo = 'NEUTRO'
                pl_estimado = preco_atual * 0.001  # Ganho m√≠nimo
            
            pl_percent = (pl_estimado / preco_entrada * 100) if preco_entrada > 0 else 0
            
            # Volume baseado na confian√ßa (R¬≤) e Z-Score
            volume_base = 1000
            volume_multiplicador = 1 + (r2 * 0.5) + (abs(zscore) * 0.1)
            volume = int(volume_base * volume_multiplicador)
            
            # Calcula stop loss e take profit baseado no tipo
            if tipo == 'LONG':
                stop_loss = preco_entrada * 0.97  # 3% abaixo
                take_profit = preco_entrada * 1.06  # 6% acima
            elif tipo == 'SHORT':
                stop_loss = preco_entrada * 1.03  # 3% acima
                take_profit = preco_entrada * 0.94  # 6% abaixo
            else:
                stop_loss = preco_entrada * 0.98
                take_profit = preco_entrada * 1.02
            
            # Tempo aberto simulado baseado na posi√ß√£o
            tempo_horas = 2 + (i % 5)  # Varia de 2 a 6 horas
            tempo_mins = (i * 15) % 60  # Varia os minutos
            tempo_str = f"{tempo_horas}:{tempo_mins:02d}:00"
            
            pos_data = {
                'Par': f"{dep}/{ind}",
                'Tipo': tipo,
                'Volume': f"{volume:,}",
                'Pre√ßo Abertura': f"R$ {preco_entrada:.2f}",
                'Pre√ßo Atual': f"R$ {preco_atual:.2f}",
                'P&L (R$)': f"R$ {pl_estimado:+.2f}",
                'P&L (%)': f"{pl_percent:+.2f}%",
                'Stop Loss': f"R$ {stop_loss:.2f}",
                'Take Profit': f"R$ {take_profit:.2f}",
                'Tempo Aberto': tempo_str,
                'Setor': sistema.segmentos.get(dep, 'Energia/Minera√ß√£o'),
                # Campos adicionais para an√°lise
                'Z-Score': f"{zscore:.3f}",
                'R¬≤': f"{r2:.3f}",
                'Beta_Rot': f"{row.get('beta_rotation', 0.5 + i*0.1):.3f}",
                'Confian√ßa': f"{min(95, r2 * 100):.1f}%"
            }
            posicoes_segunda.append(pos_data)
        
        if posicoes_segunda:
            # Monta tabela padronizada com busca robusta para cada coluna
            colunas_padrao = [
                'ID', 'DEPENDENTE', 'INDEPENDENTE', 'PERIODO', 'ZSCORE', 'BETA', 'R2', 'ADF_P_VALUE', 'COINT_P_VALUE', 'COINT_CRITICAL_VALUES', 'CORRELACAO'
            ]
            def buscar_valor(row, nomes):
                for nome in nomes:
                    if nome in row:
                        return row[nome]
                return ''
            mapeamento = {
                'ID': ['ID', 'id', 'id_par', 'ID Par'],
                'DEPENDENTE': ['Dependente', 'DEP', 'Ativo', 'ativo'],
                'INDEPENDENTE': ['Independente', 'INDEP'],
                'PERIODO': ['Periodo', 'PERIODO', 'periodo'],
                'ZSCORE': ['Z-Score', 'zscore', 'ZSCORE'],
                'BETA': ['beta', 'BETA', 'Beta_Rot', 'beta_rotation'],
                'R2': ['R2', 'r2', 'R¬≤'],
                'ADF_P_VALUE': ['adf_p_value', 'ADF_P_VALUE'],
                'COINT_P_VALUE': ['coint_p_value', 'COINT_P_VALUE'],
                'COINT_CRITICAL_VALUES': ['coint_critical_values', 'COINT_CRITICAL_VALUES'],
                'CORRELACAO': ['correlacao', 'CORRELACAO', 'Correlacao'],
            }
            tabela_padrao = []
            for row in posicoes_segunda:
                linha = {}
                for col in colunas_padrao:
                    linha[col] = buscar_valor(row, mapeamento[col])
                tabela_padrao.append(linha)
            df_padrao = pd.DataFrame(tabela_padrao)
            st.dataframe(df_padrao, use_container_width=True, hide_index=True, height=400)

            # Substitui df_filtered por df_padrao nas an√°lises adicionais
            with st.expander("üî¨ An√°lise Detalhada dos Pares da Segunda Sele√ß√£o"):
                if len(df_padrao) > 0:
                    col_chart1, col_chart2 = st.columns(2)
                    with col_chart1:
                        setor_dist = df_padrao['CORRELACAO'].value_counts() if 'CORRELACAO' in df_padrao.columns else None
                        if setor_dist is not None:
                            fig_setor = px.pie(
                                values=setor_dist.values,
                                names=setor_dist.index,
                                title="Distribui√ß√£o por Correla√ß√£o"
                            )
                            st.plotly_chart(fig_setor, use_container_width=True)
                    with col_chart2:
                        # Gr√°fico P&L por tipo (n√£o dispon√≠vel na tabela padronizada, exemplo)
                        pass
                    st.markdown("#### üìà Estat√≠sticas da Segunda Sele√ß√£o")
                    stats_col1, stats_col2, stats_col3, stats_col4 = st.columns(4)
                    with stats_col1:
                        long_count = len(df_padrao[df_padrao['ZSCORE'].astype(str).str.startswith('-')])
                        st.metric("ZSCORE Negativo", long_count)
                    with stats_col2:
                        short_count = len(df_padrao[df_padrao['ZSCORE'].astype(str).str.startswith('1')])
                        st.metric("ZSCORE >= 1", short_count)
                    with stats_col3:
                        if 'ZSCORE' in df_padrao.columns:
                            try:
                                zscore_medio = pd.to_numeric(df_padrao['ZSCORE'], errors='coerce').mean()
                                st.metric("ZSCORE M√©dio", f"{zscore_medio:.2f}")
                            except:
                                st.metric("ZSCORE M√©dio", "N/A")
                        else:
                            st.metric("ZSCORE M√©dio", "N/A")
                    with stats_col4:
                        if 'R2' in df_padrao.columns:
                            try:
                                r2_medio = pd.to_numeric(df_padrao['R2'], errors='coerce').mean()
                                st.metric("R2 M√©dio", f"{r2_medio:.3f}")
                            except:
                                st.metric("R2 M√©dio", "N/A")
                        else:
                            st.metric("R2 M√©dio", "N/A")
            
            # An√°lise adicional em se√ß√£o expand√≠vel
            with st.expander("üî¨ An√°lise Detalhada dos Pares da Segunda Sele√ß√£o"):
                if len(df_filtered) > 0:
                    col_chart1, col_chart2 = st.columns(2)
                    
                    with col_chart1:
                        # Gr√°fico de distribui√ß√£o por setor
                        setor_dist = df_filtered['Setor'].value_counts()
                        fig_setor = px.pie(
                            values=setor_dist.values,
                            names=setor_dist.index,
                            title="Distribui√ß√£o por Setor"
                        )
                        st.plotly_chart(fig_setor, use_container_width=True)
                    
                    with col_chart2:
                        # Gr√°fico P&L por tipo
                        pl_values = []
                        tipos = []
                        for _, row in df_filtered.iterrows():
                            pl_str = row['P&L (R$)'].replace('R$ ', '').replace('+', '')
                            try:
                                pl_val = float(pl_str)
                                pl_values.append(pl_val)
                                tipos.append(row['Tipo'])
                            except:
                                pass
                        
                        if pl_values:
                            fig_pl = px.box(
                                x=tipos,
                                y=pl_values,
                                title="Distribui√ß√£o P&L por Tipo"
                            )
                            st.plotly_chart(fig_pl, use_container_width=True)
                      # Estat√≠sticas resumidas
                    st.markdown("#### üìà Estat√≠sticas da Segunda Sele√ß√£o")
                    stats_col1, stats_col2, stats_col3, stats_col4 = st.columns(4)
                    
                    with stats_col1:
                        long_count = len(df_filtered[df_filtered['Tipo'] == 'LONG'])
                        st.metric("Posi√ß√µes LONG", long_count)
                    
                    with stats_col2:
                        short_count = len(df_filtered[df_filtered['Tipo'] == 'SHORT'])
                        st.metric("Posi√ß√µes SHORT", short_count)
                    
                    with stats_col3:
                        if 'Z-Score' in df_filtered.columns:
                            zscore_medio = df_filtered['Z-Score'].apply(lambda x: float(x) if isinstance(x, str) else x).mean()
                            st.metric("Z-Score M√©dio", f"{zscore_medio:.2f}")
                        else:
                            st.metric("Z-Score M√©dio", "N/A")
                    
                    with stats_col4:
                        if 'R¬≤' in df_filtered.columns:
                            r2_medio = df_filtered['R¬≤'].apply(lambda x: float(x) if isinstance(x, str) else x).mean()
                            st.metric("R¬≤ M√©dio", f"{r2_medio:.3f}")
                        else:
                            st.metric("R¬≤ M√©dio", "N/A")
        
        else:
            st.error("‚ùå Erro ao processar dados da segunda sele√ß√£o")
    
    else:
        # Mostra exemplo se houver dados da primeira sele√ß√£o
        if hasattr(sistema, 'tabela_linha_operacao') and not sistema.tabela_linha_operacao.empty:
            st.info("üí° Dados da primeira sele√ß√£o dispon√≠veis. Execute a segunda sele√ß√£o para an√°lise refinada.")
            
            df_primeira = sistema.tabela_linha_operacao.copy()
            
            # M√©tricas da primeira sele√ß√£o
            col1, col2, col3 = st.columns(3)
            
            with col1:
                zscore_medio = df_primeira['Z-Score'].abs().mean()
                st.metric("Z-Score M√©dio", f"{zscore_medio:.2f}")
            
            with col2:
                r2_medio = df_primeira['r2'].mean() if 'r2' in df_primeira.columns else 0
                st.metric("R¬≤ M√©dio", f"{r2_medio:.3f}")
            
            with col3:
                pares_extremos = len(df_primeira[df_primeira['Z-Score'].abs() >= 2.0])
                st.metric("Pares Extremos", f"{pares_extremos}")
              # Tabela resumida da primeira sele√ß√£o
            st.markdown("#### üìã Pr√©via da Primeira Sele√ß√£o")
            colunas_preview = ['Dependente', 'Independente', 'Z-Score', 'r2']
            if all(col in df_primeira.columns for col in colunas_preview):
                df_preview = df_primeira[colunas_preview].head(10).copy()
                df_preview['Z-Score'] = df_preview['Z-Score'].round(3)
                df_preview['r2'] = df_preview['r2'].round(3)
                st.dataframe(df_preview, use_container_width=True)
            
            st.info("üí° Execute a segunda sele√ß√£o para obter an√°lise completa com spreads e previs√µes!")
        else:
            st.info("üìä Nenhuma an√°lise dispon√≠vel. Execute o sistema para gerar dados.")
        
        with st.expander("‚ÑπÔ∏è Sobre a Segunda Sele√ß√£o"):
            st.markdown("""
            **üéØ O que √© a Segunda Sele√ß√£o?**
            
            A segunda sele√ß√£o √© um processo de refinamento que:
            
            1. **üîç Analisa os melhores pares** da primeira sele√ß√£o
            2. **üìä Aplica calcular_residuo_zscore_timeframe01** para an√°lise detalhada
            3. **üí∞ Calcula pre√ßos de entrada otimizados** baseados em spreads
            4. **‚ö° Prioriza por proximidade de pre√ßo** para maximizar execu√ß√£o
            5. **üéØ Gera tabela_linha_operacao01** com pares prontos para trade
            
            **üìà Vantagens:**
            - Maior precis√£o na entrada
            - Redu√ß√£o de slippage
            - Melhor gest√£o de risco
            - Pares priorizados por viabilidade de execu√ß√£o
            
            **üîß Para ativar:** Inicie o sistema de an√°lise real no painel principal.
            """)

def main():
    """Fun√ß√£o principal do dashboard"""
    # Header
    render_header()
    
    # Sidebar com configura√ß√µes
    config = render_sidebar()
    
    # Status da √∫ltima atualiza√ß√£o no header
    col1, col2 = st.columns([3, 1])
    with col2:
        if st.session_state.trading_system.dados_sistema['ultimo_update']:
            ultima_atualizacao = st.session_state.trading_system.dados_sistema['ultimo_update'].strftime("%H:%M:%S")
            #st.markdown(f"**√öltima atualiza√ß√£o:** {ultima_atualizacao}")    # Cart√µes de status
    render_status_cards()
    
    st.markdown("---")
      # Pain√©is principais
    tab1, tab3, tab2, tab4, tab5 = st.tabs(["üìä Gr√°ficos e An√°lises", "üéØ Pares Validados", "üì° Sinais e Posi√ß√µes", "üìã Hist√≥ricos", "üìù Log de Eventos"])
    
    with tab1:
        # Gr√°ficos lado a lado
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de equity
            render_equity_chart()
        
        with col2:
            # Distribui√ß√£o de resultados
            render_profit_distribution()
        st.markdown("---")
        
        # Posi√ß√µes Detalhadas
        render_positions_table()
        
        st.markdown("---")
        
        # Bot√µes de exporta√ß√£o
        #st.markdown("### üì§ Exporta√ß√£o de Relat√≥rios")
        render_export_section()
    with tab2:
        # Apenas sinais de trading
        render_signals_table()
    
    with tab3:
        render_segunda_selecao()
    
    with tab4:
        # Hist√≥rico de trades
        render_trade_history()
    
    with tab5:
        # Log de Eventos do Sistema
        render_logs()
    
    # Auto-refresh a cada 30 segundos se o sistema estiver rodando
    if st.session_state.trading_system.running:
        time_module.sleep(1)  # Pequena pausa para n√£o sobrecarregar
        st.rerun()

def obter_equity_historico_mt5(sistema):
    """Obt√©m hist√≥rico de equity diretamente do MT5 para popular o gr√°fico"""
    if not sistema.mt5_connected:
        return []
    
    try:
        import MetaTrader5 as mt5
        from datetime import datetime, timedelta
        
        # Busca dados dos √∫ltimos 7 dias ou desde o in√≠cio do m√™s
        data_fim = datetime.now()
        data_inicio = data_fim - timedelta(days=7)  # √öltimos 7 dias
        
        # Tenta obter o hist√≥rico de deals para reconstruir a curva de equity
        deals = mt5.history_deals_get(data_inicio, data_fim)
        
        if not deals or len(deals) == 0:
            # Se n√£o h√° deals, cria um ponto com dados atuais
            account_info = mt5.account_info()
            if account_info:
                return [{
                    'timestamp': datetime.now(),
                    'equity': account_info.equity,
                    'balance': account_info.balance,
                    'profit': account_info.profit
                }]
            return []
        
        # Reconstroi curva de equity baseada nos deals
        equity_historico = []
        account_info = mt5.account_info()
        if not account_info:
            return []
        
        equity_atual = account_info.equity
        balance_atual = account_info.balance
        
        # Calcula equity inicial (aproximado)
        lucro_total_deals = sum([deal.profit for deal in deals if hasattr(deal, 'profit')])
        equity_inicial = equity_atual - lucro_total_deals
        
        # Cria pontos da curva
        equity_historico.append({
            'timestamp': data_inicio,
            'equity': equity_inicial,
            'balance': balance_atual - lucro_total_deals,
            'profit': 0.0
        })
        
        # Adiciona pontos baseados nos deals (simplificado)
        lucro_acumulado = 0
        for deal in sorted(deals, key=lambda x: x.time):
            if hasattr(deal, 'profit') and deal.profit != 0:
                lucro_acumulado += deal.profit
                equity_historico.append({
                    'timestamp': datetime.fromtimestamp(deal.time),
                    'equity': equity_inicial + lucro_acumulado,
                    'balance': balance_atual - lucro_total_deals + lucro_acumulado,
                    'profit': lucro_acumulado
                })
        
        # Adiciona ponto atual final
        equity_historico.append({
            'timestamp': datetime.now(),
            'equity': equity_atual,
            'balance': balance_atual,
            'profit': account_info.profit
        })
        
        return equity_historico
        
    except Exception as e:
        sistema.log(f"‚ùå Erro ao obter hist√≥rico de equity do MT5: {str(e)}")
        return []

if __name__ == "__main__":
    main()
