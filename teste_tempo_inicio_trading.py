#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar quanto tempo demora para o trading de zscores iniciar
ap√≥s o sistema integrado ser iniciado.
"""

import time
import threading
from datetime import datetime
import sys
import os

# Adiciona o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def teste_aguardar_proximo_minuto():
    """Testa a fun√ß√£o aguardar_proximo_minuto para ver quanto tempo ela demora."""
    print(f"[TESTE] Iniciando teste de aguardar_proximo_minuto √†s {datetime.now().strftime('%H:%M:%S')}")
    
    def aguardar_proximo_minuto():
        """Aguarda at√© o in√≠cio do pr√≥ximo minuto."""
        inicio = time.time()
        while True:
            # Obt√©m o segundo atual
            segundo_atual = datetime.now().second
            # Se estivermos no in√≠cio de um novo minuto, saia do loop
            if segundo_atual == 0:
                break
            # Aguarda 1 segundo antes de verificar novamente
            time.sleep(1)
        
        fim = time.time()
        tempo_espera = fim - inicio
        print(f"[TESTE] aguardar_proximo_minuto() demorou {tempo_espera:.2f} segundos")
        return tempo_espera
    
    return aguardar_proximo_minuto()

def teste_simulacao_horario_app():
    """Testa o comportamento do sistema em diferentes hor√°rios."""
    print(f"\n[TESTE] Simulando verifica√ß√µes de hor√°rio...")
    
    # Configura√ß√µes do sistema (copiadas do calculo_entradas_v55.py)
    inicia_app = 8
    finaliza_app = 24
    inicia_pregao = 8
    finaliza_pregao = 17
    
    now = datetime.now()
    current_hour = now.hour
    current_minute = now.minute
    
    print(f"Hor√°rio atual: {current_hour:02d}:{current_minute:02d}")
    print(f"Hor√°rio de funcionamento do app: {inicia_app}h - {finaliza_app}h")
    print(f"Hor√°rio de preg√£o: {inicia_pregao}h - {finaliza_pregao}h")
    
    if inicia_app <= current_hour < finaliza_app:
        print("‚úÖ Sistema DENTRO do hor√°rio de funcionamento do app")
        
        if inicia_pregao <= current_hour < finaliza_pregao:
            print("‚úÖ Sistema DENTRO do hor√°rio de preg√£o - TRADING ATIVO")
        else:
            print("‚ö†Ô∏è Sistema FORA do hor√°rio de preg√£o - TRADING INATIVO")
    else:
        print("‚ùå Sistema FORA do hor√°rio de funcionamento - HIBERNANDO")
        tempo_hibernacao = 900  # 15 minutos
        print(f"Tempo de hiberna√ß√£o: {tempo_hibernacao} segundos ({tempo_hibernacao/60:.1f} minutos)")

def teste_sistema_integrado_rapido():
    """Testa se o sistema integrado consegue executar o calculo_entradas_v55.py rapidamente."""
    print(f"\n[TESTE] Testando execu√ß√£o do sistema integrado...")
    
    try:
        import sistema_integrado
        print("‚úÖ M√≥dulo sistema_integrado importado com sucesso")
        
        # Verifica se as classes est√£o dispon√≠veis
        if hasattr(sistema_integrado, 'SistemaIntegrado'):
            print("‚úÖ Classe SistemaIntegrado encontrada")
            
            # Cria uma inst√¢ncia para teste
            sistema = sistema_integrado.SistemaIntegrado()
            print(f"‚úÖ Inst√¢ncia criada. Estado inicial: {sistema.sistema_ativo}")
            
            # Verifica se o m√©todo de execu√ß√£o est√° dispon√≠vel
            if hasattr(sistema, 'executar_sistema_original'):
                print("‚úÖ M√©todo executar_sistema_original encontrado")
                print("‚ÑπÔ∏è O sistema pode executar o calculo_entradas_v55.py")
            else:
                print("‚ùå M√©todo executar_sistema_original n√£o encontrado")
                
        else:
            print("‚ùå Classe SistemaIntegrado n√£o encontrada")
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar sistema_integrado: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def main():
    """Fun√ß√£o principal de teste."""
    print("=" * 60)
    print("TESTE DE TEMPO DE IN√çCIO DO TRADING DE ZSCORES")
    print("=" * 60)
    
    # Teste 1: Tempo de espera at√© pr√≥ximo minuto
    print("\n1. TESTE: Tempo de espera at√© pr√≥ximo minuto")
    tempo_espera = teste_aguardar_proximo_minuto()
    
    # Teste 2: Verifica√ß√£o de hor√°rios
    print("\n2. TESTE: Verifica√ß√£o de hor√°rios de funcionamento")
    teste_simulacao_horario_app()
    
    # Teste 3: Sistema integrado
    print("\n3. TESTE: Sistema integrado")
    teste_sistema_integrado_rapido()
    
    # An√°lise final
    print("\n" + "=" * 60)
    print("AN√ÅLISE DOS TEMPOS DE IN√çCIO")
    print("=" * 60)
    
    print(f"üìä RESUMO:")
    print(f"   ‚Ä¢ Tempo at√© pr√≥ximo minuto: {tempo_espera:.2f}s (m√°ximo: 60s)")
    print(f"   ‚Ä¢ Hor√°rio atual: {datetime.now().strftime('%H:%M:%S')}")
    
    now = datetime.now()
    inicia_app = 8
    finaliza_app = 24
    inicia_pregao = 8
    finaliza_pregao = 17
    
    if inicia_app <= now.hour < finaliza_app:
        if inicia_pregao <= now.hour < finaliza_pregao:
            print(f"   ‚Ä¢ Status: TRADING ATIVO ‚úÖ")
            print(f"   ‚Ä¢ Tempo estimado para in√≠cio: {tempo_espera:.2f}s")
        else:
            print(f"   ‚Ä¢ Status: FORA DO HOR√ÅRIO DE PREG√ÉO ‚ö†Ô∏è")
            print(f"   ‚Ä¢ Pr√≥ximo preg√£o: {inicia_pregao}:00 de amanh√£")
    else:
        print(f"   ‚Ä¢ Status: SISTEMA HIBERNANDO ‚ùå")
        print(f"   ‚Ä¢ Pr√≥ximo funcionamento: {inicia_app}:00")
    
    print("\nüîç CONCLUS√ïES:")
    print("   1. O sistema espera at√© o pr√≥ximo minuto para iniciar")
    print("   2. Ap√≥s iniciar, verifica hor√°rios de funcionamento")
    print("   3. Se dentro do hor√°rio de preg√£o, inicia trading imediatamente")
    print("   4. Se fora do hor√°rio, hiberna por 15 minutos")
    
    print(f"\n‚è±Ô∏è TEMPO TOTAL ESTIMADO PARA IN√çCIO DO TRADING:")
    if inicia_pregao <= now.hour < finaliza_pregao:
        print(f"   ‚Ä¢ Dentro do preg√£o: {tempo_espera:.2f}s + ~5s (processamento)")
        print(f"   ‚Ä¢ TOTAL: ~{tempo_espera + 5:.0f} segundos")
    else:
        print(f"   ‚Ä¢ Fora do preg√£o: Hibernando at√© {inicia_pregao}:00")

if __name__ == "__main__":
    main()
