#!/usr/bin/env python3
"""
Teste do Sistema de Par√¢metros Din√¢micos
Valida se a comunica√ß√£o entre dashboard, sistema_integrado e calculo_entradas_v55 est√° funcionando
"""

import os
import sys
import time
from datetime import datetime

def teste_parametros_dinamicos():
    """Testa o fluxo completo de par√¢metros din√¢micos"""
    print("üß™ TESTE DO SISTEMA DE PAR√ÇMETROS DIN√ÇMICOS")
    print("=" * 60)
    
    try:
        # Importa o sistema de par√¢metros din√¢micos
        from parametros_dinamicos import (
            gerenciador_parametros, 
            salvar_config_dashboard, 
            verificar_parametros_alterados,
            obter_config_sistema_principal,
            aplicar_parametros_sistema
        )
        
        print("‚úÖ Sistema de par√¢metros din√¢micos importado com sucesso")
        
        # Teste 1: Verificar estado inicial
        print("\nüìã TESTE 1: Estado inicial dos par√¢metros")
        parametros_iniciais = gerenciador_parametros.carregar_parametros()
        print(f"   ‚Ä¢ Par√¢metros alterados: {parametros_iniciais.get('parametros_alterados', False)}")
        print(f"   ‚Ä¢ Valor opera√ß√£o atual: R$ {parametros_iniciais.get('valor_operacao', 0):,}")
        print(f"   ‚Ä¢ Limite opera√ß√µes: {parametros_iniciais.get('max_posicoes', 0)}")
        print(f"   ‚Ä¢ R¬≤ m√≠nimo: {parametros_iniciais.get('r2_min', 0)}")
        
        # Teste 2: Simular altera√ß√£o do dashboard
        print("\nüìã TESTE 2: Simulando altera√ß√£o do dashboard")
        config_teste = {
            'max_posicoes': 8,  # Alterado de 6 para 8
            'valor_operacao': 15000,  # Alterado de 10000 para 15000
            'r2_min': 0.65,  # Alterado de 0.5 para 0.65
            'zscore_min': 2.5,  # Alterado de 2.0 para 2.5
            'filtro_cointegracao': True,
            'ativos_selecionados': ['PETR4', 'VALE3', 'ITUB4', 'BBAS3']
        }
        
        sucesso = salvar_config_dashboard(config_teste)
        print(f"   ‚Ä¢ Salvamento: {'‚úÖ Sucesso' if sucesso else '‚ùå Falha'}")
        
        # Teste 3: Verificar se altera√ß√µes foram detectadas
        print("\nüìã TESTE 3: Verificando detec√ß√£o de altera√ß√µes")
        tem_alteracoes = verificar_parametros_alterados()
        print(f"   ‚Ä¢ Altera√ß√µes detectadas: {'‚úÖ Sim' if tem_alteracoes else '‚ùå N√£o'}")
        
        if tem_alteracoes:
            # Teste 4: Obter configura√ß√£o para sistema principal
            print("\nüìã TESTE 4: Obtendo configura√ß√£o para sistema principal")
            config_sistema = obter_config_sistema_principal()
            print(f"   ‚Ä¢ Limite opera√ß√µes: {config_sistema.get('limite_operacoes', 0)}")
            print(f"   ‚Ä¢ Valor opera√ß√£o: R$ {config_sistema.get('valor_operacao', 0):,}")
            print(f"   ‚Ä¢ R¬≤ m√≠nimo: {config_sistema.get('filter_params', {}).get('r2_min', 0)}")
            
            # Teste 5: Marcar como aplicado
            print("\nüìã TESTE 5: Marcando par√¢metros como aplicados")
            aplicacao_ok = aplicar_parametros_sistema()
            print(f"   ‚Ä¢ Marca√ß√£o como aplicado: {'‚úÖ Sucesso' if aplicacao_ok else '‚ùå Falha'}")
            
            # Verificar se n√£o h√° mais altera√ß√µes pendentes
            tem_alteracoes_pos = verificar_parametros_alterados()
            print(f"   ‚Ä¢ Altera√ß√µes pendentes ap√≥s aplica√ß√£o: {'‚ùå Ainda h√°' if tem_alteracoes_pos else '‚úÖ Nenhuma'}")
        
        # Teste 6: Testar integra√ß√£o com sistema integrado
        print("\nüìã TESTE 6: Testando integra√ß√£o com sistema integrado")
        try:
            from sistema_integrado import SistemaIntegrado
            
            # Cria uma inst√¢ncia do sistema integrado
            sistema = SistemaIntegrado()
            
            # For√ßa nova altera√ß√£o para testar
            config_teste_2 = {
                'max_posicoes': 10,
                'valor_operacao': 20000,
                'limite_lucro': 150,
                'limite_prejuizo': 100
            }
            salvar_config_dashboard(config_teste_2)
            
            # Aplica par√¢metros no sistema integrado
            valores_antes = {
                'limite_operacoes': sistema.limite_operacoes,
                'valor_operacao': sistema.valor_operacao,
                'limite_lucro': sistema.limite_lucro,
                'limite_prejuizo': sistema.limite_prejuizo
            }
            print(f"   ‚Ä¢ Valores antes: {valores_antes}")
            
            sistema.aplicar_parametros_dinamicos()
            
            valores_depois = {
                'limite_operacoes': sistema.limite_operacoes,
                'valor_operacao': sistema.valor_operacao,
                'limite_lucro': sistema.limite_lucro,
                'limite_prejuizo': sistema.limite_prejuizo
            }
            print(f"   ‚Ä¢ Valores depois: {valores_depois}")
            
            # Verifica se os valores foram alterados
            alteracoes_detectadas = []
            for chave in valores_antes:
                if valores_antes[chave] != valores_depois[chave]:
                    alteracoes_detectadas.append(f"{chave}: {valores_antes[chave]} ‚Üí {valores_depois[chave]}")
            
            if alteracoes_detectadas:
                print("   ‚úÖ Altera√ß√µes aplicadas no sistema integrado:")
                for alteracao in alteracoes_detectadas:
                    print(f"     ‚Ä¢ {alteracao}")
            else:
                print("   ‚ö†Ô∏è Nenhuma altera√ß√£o detectada no sistema integrado")
                
        except ImportError:
            print("   ‚ö†Ô∏è Sistema integrado n√£o dispon√≠vel para teste")
        except Exception as e:
            print(f"   ‚ùå Erro ao testar sistema integrado: {e}")
        
        print("\nüìã TESTE 7: Limpeza e restaura√ß√£o")
        # Restaura valores padr√£o
        config_padrao = {
            'max_posicoes': 6,
            'valor_operacao': 10000,
            'r2_min': 0.5,
            'zscore_min': 2.0,
            'filtro_cointegracao': True,
            'ativos_selecionados': ['PETR4', 'VALE3', 'ITUB4', 'BBAS3', 'ABEV3']
        }
        salvar_config_dashboard(config_padrao)
        aplicar_parametros_sistema()
        print("   ‚úÖ Valores padr√£o restaurados")
        
        print("\n" + "=" * 60)
        print("‚úÖ TESTE COMPLETO FINALIZADO COM SUCESSO")
        print("üìä O sistema de par√¢metros din√¢micos est√° funcionando corretamente!")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    teste_parametros_dinamicos()
