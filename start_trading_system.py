

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de inicializa√ß√£o do Sistema de Trading Streamlit
Execute este arquivo para iniciar o sistema completo
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå ERRO: Python 3.8 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    try:
        import streamlit
        import plotly
        import pandas
        import numpy
        import MetaTrader5
        print("‚úÖ Depend√™ncias principais encontradas")
        return True
    except ImportError as e:
        print(f"‚ùå ERRO: Depend√™ncia n√£o encontrada: {e}")
        print("Execute: pip install -r requirements_streamlit.txt")
        return False

def install_dependencies():
    """Instala as depend√™ncias automaticamente"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements_streamlit.txt"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå ERRO: Falha na instala√ß√£o das depend√™ncias")
        return False

def check_mt5():
    """Verifica se o MetaTrader 5 est√° dispon√≠vel"""
    try:
        import MetaTrader5 as mt5
        # Tentativa de inicializa√ß√£o (pode falhar se n√£o estiver configurado)
        result = mt5.initialize()
        if result:
            account_info = mt5.account_info()
            if account_info:
                print(f"‚úÖ MT5 conectado: {account_info.company} - {account_info.server}")
            else:
                print("‚ö†Ô∏è MT5 dispon√≠vel mas sem conta ativa")
            mt5.shutdown()
        else:
            print("‚ö†Ô∏è MT5 dispon√≠vel mas n√£o inicializado")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è MT5 n√£o dispon√≠vel: {e}")
        print("Instale o MetaTrader 5 para funcionalidade completa")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['logs', 'data', 'exports', 'backups']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"üìÅ Diret√≥rio criado: {directory}")

def check_config():
    """Verifica se os arquivos de configura√ß√£o existem"""
    config_files = [
        'config.py',
        'trading_core.py',
        'trading_system_streamlit.py'
    ]
    
    all_exist = True
    for file in config_files:
        if Path(file).exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} n√£o encontrado")
            all_exist = False
    
    return all_exist

def start_streamlit():
    """Inicia o servidor Streamlit"""
    print("\nüöÄ Iniciando Sistema de Trading...")
    print("=" * 50)
    print("üìç URL: http://localhost:8501")
    print("‚öôÔ∏è Para parar: Ctrl+C")
    print("=" * 50)
    
    try:
        # Iniciar Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "trading_system_streamlit.py",
            "--server.port", "8501",
            "--server.address", "localhost",
            "--theme.base", "light"
        ])
    except KeyboardInterrupt:
        print("\nüõë Sistema parado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå ERRO ao iniciar Streamlit: {e}")

def print_banner():
    """Imprime banner do sistema"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                          ‚ïë
    ‚ïë          üöÄ SISTEMA DE TRADING PROFISSIONAL üöÄ          ‚ïë
    ‚ïë                                                          ‚ïë
    ‚ïë              An√°lise de Cointegra√ß√£o                     ‚ïë
    ‚ïë              Modelos ARIMA/GARCH                         ‚ïë
    ‚ïë              Execu√ß√£o Automatizada                       ‚ïë
    ‚ïë                                                          ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print_banner()
    
    print("üîç Verificando sistema...")
    
    # Verifica√ß√µes
    if not check_python_version():
        sys.exit(1)
    
    # Verificar configura√ß√µes
    if not check_config():
        print("\n‚ùå ERRO: Arquivos de configura√ß√£o n√£o encontrados")
        print("Certifique-se de que todos os arquivos est√£o no diret√≥rio correto")
        sys.exit(1)
    
    # Verificar depend√™ncias
    if not check_dependencies():
        install = input("\nüì¶ Instalar depend√™ncias automaticamente? (s/n): ")
        if install.lower() in ['s', 'sim', 'y', 'yes']:
            if not install_dependencies():
                sys.exit(1)
        else:
            print("Execute: pip install -r requirements_streamlit.txt")
            sys.exit(1)
    
    # Verificar MT5
    check_mt5()
    
    # Criar diret√≥rios
    create_directories()
    
    print("\n‚úÖ Sistema verificado com sucesso!")
    
    # Aguardar confirma√ß√£o
    input("\nüöÄ Pressione ENTER para iniciar o sistema...")
    
    # Iniciar Streamlit
    start_streamlit()

if __name__ == "__main__":
    main()
