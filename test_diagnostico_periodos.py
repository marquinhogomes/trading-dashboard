#!/usr/bin/env python3
"""
Script de teste para diagn√≥stico da transmiss√£o de configura√ß√£o
de m√∫ltiplos per√≠odos entre interface e l√≥gica de an√°lise.
"""

def test_config_transmission():
    """Testa transmiss√£o completa da configura√ß√£o"""
    print("üîç DIAGN√ìSTICO: Transmiss√£o de Configura√ß√£o de Per√≠odos")
    print("=" * 60)
    
    print("\nüìã 1. TESTE DA INTERFACE (render_sidebar)")
    
    # Simula a interface do sidebar
    print("Interface do sidebar:")
    usar_multiplos_periodos_radio = "M√∫ltiplos Per√≠odos"  # Default (index=1)
    periodo_analise_slider = 250  # Valor padr√£o quando oculto
    
    print(f"   - Radio button: '{usar_multiplos_periodos_radio}'")
    print(f"   - Slider valor (quando oculto): {periodo_analise_slider}")
    
    # Simula cria√ß√£o do config
    config = {
        'periodo_analise': periodo_analise_slider,
        'usar_multiplos_periodos': usar_multiplos_periodos_radio == "M√∫ltiplos Per√≠odos",
        'ativos_selecionados': ['PETR4', 'VALE3'],
        'timeframe': '1 dia'
    }
    
    print(f"   - Config gerado: usar_multiplos_periodos = {config['usar_multiplos_periodos']}")
    print(f"   - Config gerado: periodo_analise = {config['periodo_analise']}")
    
    print("\nüîÑ 2. TESTE DA FUN√á√ÉO AN√ÅLISE (executar_analise_real)")
    
    # Simula l√≥gica da fun√ß√£o executar_analise_real
    usar_multiplos_periodos = config.get('usar_multiplos_periodos', True)
    periodo_unico = config.get('periodo_analise', 250)
    
    print(f"   - Valor recebido usar_multiplos_periodos: {usar_multiplos_periodos}")
    print(f"   - Valor recebido periodo_unico: {periodo_unico}")
    
    if usar_multiplos_periodos:
        periodos_analise = [70, 100, 120, 140, 160, 180, 200, 220, 240, 250]
        modo = "M√∫ltiplos per√≠odos can√¥nicos"
    else:
        periodos_analise = [periodo_unico]
        modo = "Per√≠odo √∫nico"
    
    print(f"   - Modo detectado: {modo}")
    print(f"   - Per√≠odos finais: {periodos_analise}")
    
    print("\n‚úÖ 3. VALIDA√á√ÉO")
    esperado_multiplos = True
    esperado_periodos = [70, 100, 120, 140, 160, 180, 200, 220, 240, 250]
    
    resultado_correto = (
        usar_multiplos_periodos == esperado_multiplos and
        periodos_analise == esperado_periodos
    )
    
    if resultado_correto:
        print("‚úÖ CORRETO: M√∫ltiplos per√≠odos sendo aplicados corretamente")
        return True
    else:
        print("‚ùå PROBLEMA: M√∫ltiplos per√≠odos N√ÉO sendo aplicados")
        print(f"   Esperado usar_multiplos_periodos: {esperado_multiplos}")
        print(f"   Recebido usar_multiplos_periodos: {usar_multiplos_periodos}")
        print(f"   Esperado per√≠odos: {esperado_periodos}")
        print(f"   Recebido per√≠odos: {periodos_analise}")
        return False

def test_config_transmission_periodo_unico():
    """Testa transmiss√£o para per√≠odo √∫nico"""
    print("\nüîç DIAGN√ìSTICO: Per√≠odo √önico")
    print("=" * 40)
    
    # Simula sele√ß√£o de per√≠odo √∫nico
    usar_multiplos_periodos_radio = "Per√≠odo √önico"
    periodo_analise_slider = 95  # Valor do slider quando vis√≠vel
    
    config = {
        'periodo_analise': periodo_analise_slider,
        'usar_multiplos_periodos': usar_multiplos_periodos_radio == "M√∫ltiplos Per√≠odos",
        'ativos_selecionados': ['PETR4', 'VALE3'],
        'timeframe': '1 dia'
    }
    
    print(f"   - Radio button: '{usar_multiplos_periodos_radio}'")
    print(f"   - Config usar_multiplos_periodos: {config['usar_multiplos_periodos']}")
    
    # Simula l√≥gica
    usar_multiplos_periodos = config.get('usar_multiplos_periodos', True)
    periodo_unico = config.get('periodo_analise', 250)
    
    if usar_multiplos_periodos:
        periodos_analise = [70, 100, 120, 140, 160, 180, 200, 220, 240, 250]
        modo = "M√∫ltiplos per√≠odos can√¥nicos"
    else:
        periodos_analise = [periodo_unico]
        modo = "Per√≠odo √∫nico"
    
    print(f"   - Per√≠odos finais: {periodos_analise}")
    print(f"   - Modo: {modo}")
    
    esperado = [95]
    correto = periodos_analise == esperado
    print(f"   - ‚úÖ Correto: {correto}")
    
    return correto

def test_debug_logs():
    """Sugere logs para debug no dashboard real"""
    print("\nüêõ SUGEST√ïES PARA DEBUG NO DASHBOARD REAL:")
    print("=" * 50)
    
    print("""
üìù Adicione estes logs na fun√ß√£o executar_analise_real para debug:

1. Logo ap√≥s receber o config:
   self.log(f"üîß DEBUG: Config recebido - usar_multiplos_periodos: {config.get('usar_multiplos_periodos')}")
   self.log(f"üîß DEBUG: Config recebido - periodo_analise: {config.get('periodo_analise')}")

2. Logo ap√≥s definir periodos_analise:
   self.log(f"üîß DEBUG: usar_multiplos_periodos processado: {usar_multiplos_periodos}")
   self.log(f"üîß DEBUG: periodos_analise final: {periodos_analise}")
   self.log(f"üîß DEBUG: Quantidade de per√≠odos: {len(periodos_analise)}")

3. No loop de an√°lise, para confirmar quantos per√≠odos s√£o processados:
   for i, periodo_atual in enumerate(periodos_analise):
       self.log(f"üîß DEBUG: Processando per√≠odo {i+1}/{len(periodos_analise)}: {periodo_atual}")
       # ... resto do loop
    """)

if __name__ == "__main__":
    print("üîç DIAGN√ìSTICO COMPLETO: M√öLTIPLOS PER√çODOS")
    print("=" * 60)
    
    # Testa m√∫ltiplos per√≠odos
    resultado_multiplos = test_config_transmission()
    
    # Testa per√≠odo √∫nico
    resultado_unico = test_config_transmission_periodo_unico()
    
    # Debug suggestions
    test_debug_logs()
    
    print("\nüìä RESUMO DO DIAGN√ìSTICO:")
    print(f"‚úÖ M√∫ltiplos per√≠odos: {'OK' if resultado_multiplos else 'PROBLEMA'}")
    print(f"‚úÖ Per√≠odo √∫nico: {'OK' if resultado_unico else 'PROBLEMA'}")
    
    if resultado_multiplos and resultado_unico:
        print("\nüéâ RESULTADO: L√≥gica da configura√ß√£o est√° CORRETA")
        print("üìã Se m√∫ltiplos per√≠odos n√£o est√£o sendo usados, o problema pode ser:")
        print("   1. Na interface do dashboard (config n√£o sendo criado correto)")
        print("   2. Na transmiss√£o entre sidebar e sistema")
        print("   3. Logs n√£o est√£o sendo exibidos")
        print("\nüí° SOLU√á√ÉO: Adicione logs de debug conforme sugerido acima")
    else:
        print("\n‚ùå RESULTADO: H√° problemas na l√≥gica")
        print("üí° SOLU√á√ÉO: Revisar e corrigir a l√≥gica de configura√ß√£o")
