#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verificador Final - Testa se todas as corre√ß√µes funcionam
"""

import sys
import os
import subprocess
import time
from datetime import datetime

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    print("üîç VERIFICANDO ARQUIVOS...")
    
    arquivos_necessarios = [
        'sistema_integrado_fixed.py',
        'calculo_entradas_v55.py',
        'requirements.txt'
    ]
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå {arquivo} - N√ÉO ENCONTRADO")
    
    print()

def verificar_encoding():
    """Testa se o encoding UTF-8 funciona"""
    print("üî§ VERIFICANDO ENCODING UTF-8...")
    
    try:
        # Testa caracteres especiais
        emojis = "üéØüìäüí∞üìàüîç‚ö°‚úÖ‚ùå"
        print(f"   Emojis: {emojis}")
        
        # Testa caracteres latinos
        texto = "A√ß√£o, cora√ß√£o, n√£o"
        print(f"   Acentos: {texto}")
        
        # Testa encoding do arquivo original
        if os.path.exists('calculo_entradas_v55.py'):
            encodings = ['utf-8', 'latin-1', 'cp1252']
            for encoding in encodings:
                try:
                    with open('calculo_entradas_v55.py', 'r', encoding=encoding) as f:
                        f.read(100)  # L√™ apenas um peda√ßo
                    print(f"   ‚úÖ Leitura OK com {encoding}")
                    break
                except UnicodeDecodeError:
                    print(f"   ‚ö†Ô∏è  Erro com {encoding}")
        
        print("   ‚úÖ Encoding UTF-8 funcionando")
    except Exception as e:
        print(f"   ‚ùå Erro de encoding: {e}")
    
    print()

def verificar_sintaxe():
    """Verifica se n√£o h√° erros de sintaxe"""
    print("üêç VERIFICANDO SINTAXE PYTHON...")
    
    try:
        import ast
        
        arquivos_python = [
            'sistema_integrado_fixed.py',
            'calculo_entradas_v55.py'
        ]
        
        for arquivo in arquivos_python:
            if os.path.exists(arquivo):
                try:
                    with open(arquivo, 'r', encoding='utf-8', errors='ignore') as f:
                        codigo = f.read()
                    ast.parse(codigo)
                    print(f"   ‚úÖ {arquivo} - Sintaxe OK")
                except SyntaxError as e:
                    print(f"   ‚ùå {arquivo} - Erro de sintaxe: {e}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  {arquivo} - Aviso: {e}")
    
    except Exception as e:
        print(f"   ‚ùå Erro na verifica√ß√£o: {e}")
    
    print()

def verificar_imports():
    """Verifica se os imports funcionam"""
    print("üì¶ VERIFICANDO IMPORTS...")
    
    imports_criticos = [
        'threading',
        'datetime', 
        'json',
        'sys',
        'os',
        'time'
    ]
    
    for modulo in imports_criticos:
        try:
            __import__(modulo)
            print(f"   ‚úÖ {modulo}")
        except ImportError:
            print(f"   ‚ùå {modulo} - N√ÉO DISPON√çVEL")
    
    print()

def testar_execucao_rapida():
    """Testa se o sistema pode ser iniciado (teste r√°pido)"""
    print("‚ö° TESTE R√ÅPIDO DE EXECU√á√ÉO...")
    
    try:
        # Importa o m√≥dulo para testar
        sys.path.append('.')
        
        # Testa se consegue importar sem erros
        with open('sistema_integrado_fixed.py', 'r', encoding='utf-8') as f:
            codigo = f.read()
        
        # Verifica se as principais classes est√£o definidas
        if 'class SistemaIntegrado' in codigo:
            print("   ‚úÖ Classe SistemaIntegrado encontrada")
        
        if 'def main()' in codigo:
            print("   ‚úÖ Fun√ß√£o main encontrada")
        
        if 'threading' in codigo:
            print("   ‚úÖ Threading implementado")
        
        print("   ‚úÖ Sistema pronto para execu√ß√£o")
        
    except Exception as e:
        print(f"   ‚ùå Erro no teste: {e}")
    
    print()

def main():
    """Fun√ß√£o principal de verifica√ß√£o"""
    print("üéØ VERIFICADOR FINAL - SISTEMA INTEGRADO")
    print("=" * 50)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    print()
    
    # Execute todas as verifica√ß√µes
    verificar_arquivos()
    verificar_encoding()
    verificar_sintaxe()
    verificar_imports()
    testar_execucao_rapida()
    
    print("üéâ VERIFICA√á√ÉO COMPLETA!")
    print("=" * 50)
    print("Para executar o sistema completo:")
    print("üëâ python sistema_integrado_fixed.py")
    print("=" * 50)

if __name__ == "__main__":
    main()
